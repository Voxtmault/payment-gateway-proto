/**
 * @fileoverview gRPC-Web generated client stub for payment
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.21.12
// source: snap.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.payment = require('./snap_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.payment.SnapServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.payment.SnapServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.payment.AddVirtualAccountRequest,
 *   !proto.payment.AddVirtualAccountResponse>}
 */
const methodDescriptor_SnapService_AddVirtualAccount = new grpc.web.MethodDescriptor(
  '/payment.SnapService/AddVirtualAccount',
  grpc.web.MethodType.UNARY,
  proto.payment.AddVirtualAccountRequest,
  proto.payment.AddVirtualAccountResponse,
  /**
   * @param {!proto.payment.AddVirtualAccountRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.payment.AddVirtualAccountResponse.deserializeBinary
);


/**
 * @param {!proto.payment.AddVirtualAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.payment.AddVirtualAccountResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.payment.AddVirtualAccountResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.payment.SnapServiceClient.prototype.addVirtualAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/payment.SnapService/AddVirtualAccount',
      request,
      metadata || {},
      methodDescriptor_SnapService_AddVirtualAccount,
      callback);
};


/**
 * @param {!proto.payment.AddVirtualAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.payment.AddVirtualAccountResponse>}
 *     Promise that resolves to the response
 */
proto.payment.SnapServicePromiseClient.prototype.addVirtualAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/payment.SnapService/AddVirtualAccount',
      request,
      metadata || {},
      methodDescriptor_SnapService_AddVirtualAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.payment.Empty,
 *   !proto.payment.BalanceInquiryResponse>}
 */
const methodDescriptor_SnapService_BalanceInquiry = new grpc.web.MethodDescriptor(
  '/payment.SnapService/BalanceInquiry',
  grpc.web.MethodType.UNARY,
  proto.payment.Empty,
  proto.payment.BalanceInquiryResponse,
  /**
   * @param {!proto.payment.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.payment.BalanceInquiryResponse.deserializeBinary
);


/**
 * @param {!proto.payment.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.payment.BalanceInquiryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.payment.BalanceInquiryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.payment.SnapServiceClient.prototype.balanceInquiry =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/payment.SnapService/BalanceInquiry',
      request,
      metadata || {},
      methodDescriptor_SnapService_BalanceInquiry,
      callback);
};


/**
 * @param {!proto.payment.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.payment.BalanceInquiryResponse>}
 *     Promise that resolves to the response
 */
proto.payment.SnapServicePromiseClient.prototype.balanceInquiry =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/payment.SnapService/BalanceInquiry',
      request,
      metadata || {},
      methodDescriptor_SnapService_BalanceInquiry);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.payment.BankStatementRequest,
 *   !proto.payment.BankStatementResponse>}
 */
const methodDescriptor_SnapService_BankStatement = new grpc.web.MethodDescriptor(
  '/payment.SnapService/BankStatement',
  grpc.web.MethodType.UNARY,
  proto.payment.BankStatementRequest,
  proto.payment.BankStatementResponse,
  /**
   * @param {!proto.payment.BankStatementRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.payment.BankStatementResponse.deserializeBinary
);


/**
 * @param {!proto.payment.BankStatementRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.payment.BankStatementResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.payment.BankStatementResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.payment.SnapServiceClient.prototype.bankStatement =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/payment.SnapService/BankStatement',
      request,
      metadata || {},
      methodDescriptor_SnapService_BankStatement,
      callback);
};


/**
 * @param {!proto.payment.BankStatementRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.payment.BankStatementResponse>}
 *     Promise that resolves to the response
 */
proto.payment.SnapServicePromiseClient.prototype.bankStatement =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/payment.SnapService/BankStatement',
      request,
      metadata || {},
      methodDescriptor_SnapService_BankStatement);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.payment.TransferIntraBankRequest,
 *   !proto.payment.BankTransferResponse>}
 */
const methodDescriptor_SnapService_TransferIntraBank = new grpc.web.MethodDescriptor(
  '/payment.SnapService/TransferIntraBank',
  grpc.web.MethodType.UNARY,
  proto.payment.TransferIntraBankRequest,
  proto.payment.BankTransferResponse,
  /**
   * @param {!proto.payment.TransferIntraBankRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.payment.BankTransferResponse.deserializeBinary
);


/**
 * @param {!proto.payment.TransferIntraBankRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.payment.BankTransferResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.payment.BankTransferResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.payment.SnapServiceClient.prototype.transferIntraBank =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/payment.SnapService/TransferIntraBank',
      request,
      metadata || {},
      methodDescriptor_SnapService_TransferIntraBank,
      callback);
};


/**
 * @param {!proto.payment.TransferIntraBankRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.payment.BankTransferResponse>}
 *     Promise that resolves to the response
 */
proto.payment.SnapServicePromiseClient.prototype.transferIntraBank =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/payment.SnapService/TransferIntraBank',
      request,
      metadata || {},
      methodDescriptor_SnapService_TransferIntraBank);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.payment.TransferInterBankRequest,
 *   !proto.payment.BankTransferResponse>}
 */
const methodDescriptor_SnapService_TransferInterBank = new grpc.web.MethodDescriptor(
  '/payment.SnapService/TransferInterBank',
  grpc.web.MethodType.UNARY,
  proto.payment.TransferInterBankRequest,
  proto.payment.BankTransferResponse,
  /**
   * @param {!proto.payment.TransferInterBankRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.payment.BankTransferResponse.deserializeBinary
);


/**
 * @param {!proto.payment.TransferInterBankRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.payment.BankTransferResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.payment.BankTransferResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.payment.SnapServiceClient.prototype.transferInterBank =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/payment.SnapService/TransferInterBank',
      request,
      metadata || {},
      methodDescriptor_SnapService_TransferInterBank,
      callback);
};


/**
 * @param {!proto.payment.TransferInterBankRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.payment.BankTransferResponse>}
 *     Promise that resolves to the response
 */
proto.payment.SnapServicePromiseClient.prototype.transferInterBank =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/payment.SnapService/TransferInterBank',
      request,
      metadata || {},
      methodDescriptor_SnapService_TransferInterBank);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.payment.BankTransferRequest,
 *   !proto.payment.BankTransferResponse>}
 */
const methodDescriptor_SnapService_BankTransfer = new grpc.web.MethodDescriptor(
  '/payment.SnapService/BankTransfer',
  grpc.web.MethodType.UNARY,
  proto.payment.BankTransferRequest,
  proto.payment.BankTransferResponse,
  /**
   * @param {!proto.payment.BankTransferRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.payment.BankTransferResponse.deserializeBinary
);


/**
 * @param {!proto.payment.BankTransferRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.payment.BankTransferResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.payment.BankTransferResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.payment.SnapServiceClient.prototype.bankTransfer =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/payment.SnapService/BankTransfer',
      request,
      metadata || {},
      methodDescriptor_SnapService_BankTransfer,
      callback);
};


/**
 * @param {!proto.payment.BankTransferRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.payment.BankTransferResponse>}
 *     Promise that resolves to the response
 */
proto.payment.SnapServicePromiseClient.prototype.bankTransfer =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/payment.SnapService/BankTransfer',
      request,
      metadata || {},
      methodDescriptor_SnapService_BankTransfer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.payment.ExternalAccountInquiryRequest,
 *   !proto.payment.ExternalAccountInquiryResponse>}
 */
const methodDescriptor_SnapService_ExternalAccountInquiry = new grpc.web.MethodDescriptor(
  '/payment.SnapService/ExternalAccountInquiry',
  grpc.web.MethodType.UNARY,
  proto.payment.ExternalAccountInquiryRequest,
  proto.payment.ExternalAccountInquiryResponse,
  /**
   * @param {!proto.payment.ExternalAccountInquiryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.payment.ExternalAccountInquiryResponse.deserializeBinary
);


/**
 * @param {!proto.payment.ExternalAccountInquiryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.payment.ExternalAccountInquiryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.payment.ExternalAccountInquiryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.payment.SnapServiceClient.prototype.externalAccountInquiry =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/payment.SnapService/ExternalAccountInquiry',
      request,
      metadata || {},
      methodDescriptor_SnapService_ExternalAccountInquiry,
      callback);
};


/**
 * @param {!proto.payment.ExternalAccountInquiryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.payment.ExternalAccountInquiryResponse>}
 *     Promise that resolves to the response
 */
proto.payment.SnapServicePromiseClient.prototype.externalAccountInquiry =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/payment.SnapService/ExternalAccountInquiry',
      request,
      metadata || {},
      methodDescriptor_SnapService_ExternalAccountInquiry);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.payment.InternalAccountInquiryRequest,
 *   !proto.payment.InternalAccountInquiryResponse>}
 */
const methodDescriptor_SnapService_InternalAccountInquiry = new grpc.web.MethodDescriptor(
  '/payment.SnapService/InternalAccountInquiry',
  grpc.web.MethodType.UNARY,
  proto.payment.InternalAccountInquiryRequest,
  proto.payment.InternalAccountInquiryResponse,
  /**
   * @param {!proto.payment.InternalAccountInquiryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.payment.InternalAccountInquiryResponse.deserializeBinary
);


/**
 * @param {!proto.payment.InternalAccountInquiryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.payment.InternalAccountInquiryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.payment.InternalAccountInquiryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.payment.SnapServiceClient.prototype.internalAccountInquiry =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/payment.SnapService/InternalAccountInquiry',
      request,
      metadata || {},
      methodDescriptor_SnapService_InternalAccountInquiry,
      callback);
};


/**
 * @param {!proto.payment.InternalAccountInquiryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.payment.InternalAccountInquiryResponse>}
 *     Promise that resolves to the response
 */
proto.payment.SnapServicePromiseClient.prototype.internalAccountInquiry =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/payment.SnapService/InternalAccountInquiry',
      request,
      metadata || {},
      methodDescriptor_SnapService_InternalAccountInquiry);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.payment.VirtualAccountStatusInquiryRequest,
 *   !proto.payment.VirtualAccountStatusInquiryResponse>}
 */
const methodDescriptor_SnapService_VirtualAccountStatusInquiry = new grpc.web.MethodDescriptor(
  '/payment.SnapService/VirtualAccountStatusInquiry',
  grpc.web.MethodType.UNARY,
  proto.payment.VirtualAccountStatusInquiryRequest,
  proto.payment.VirtualAccountStatusInquiryResponse,
  /**
   * @param {!proto.payment.VirtualAccountStatusInquiryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.payment.VirtualAccountStatusInquiryResponse.deserializeBinary
);


/**
 * @param {!proto.payment.VirtualAccountStatusInquiryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.payment.VirtualAccountStatusInquiryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.payment.VirtualAccountStatusInquiryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.payment.SnapServiceClient.prototype.virtualAccountStatusInquiry =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/payment.SnapService/VirtualAccountStatusInquiry',
      request,
      metadata || {},
      methodDescriptor_SnapService_VirtualAccountStatusInquiry,
      callback);
};


/**
 * @param {!proto.payment.VirtualAccountStatusInquiryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.payment.VirtualAccountStatusInquiryResponse>}
 *     Promise that resolves to the response
 */
proto.payment.SnapServicePromiseClient.prototype.virtualAccountStatusInquiry =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/payment.SnapService/VirtualAccountStatusInquiry',
      request,
      metadata || {},
      methodDescriptor_SnapService_VirtualAccountStatusInquiry);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.payment.TransferStatusInquiryRequest,
 *   !proto.payment.TransferStatusInquiryResponse>}
 */
const methodDescriptor_SnapService_TransferStatusInquiry = new grpc.web.MethodDescriptor(
  '/payment.SnapService/TransferStatusInquiry',
  grpc.web.MethodType.UNARY,
  proto.payment.TransferStatusInquiryRequest,
  proto.payment.TransferStatusInquiryResponse,
  /**
   * @param {!proto.payment.TransferStatusInquiryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.payment.TransferStatusInquiryResponse.deserializeBinary
);


/**
 * @param {!proto.payment.TransferStatusInquiryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.payment.TransferStatusInquiryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.payment.TransferStatusInquiryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.payment.SnapServiceClient.prototype.transferStatusInquiry =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/payment.SnapService/TransferStatusInquiry',
      request,
      metadata || {},
      methodDescriptor_SnapService_TransferStatusInquiry,
      callback);
};


/**
 * @param {!proto.payment.TransferStatusInquiryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.payment.TransferStatusInquiryResponse>}
 *     Promise that resolves to the response
 */
proto.payment.SnapServicePromiseClient.prototype.transferStatusInquiry =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/payment.SnapService/TransferStatusInquiry',
      request,
      metadata || {},
      methodDescriptor_SnapService_TransferStatusInquiry);
};


module.exports = proto.payment;

