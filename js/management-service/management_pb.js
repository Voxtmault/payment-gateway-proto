// source: management.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var snap_pb = require('./snap_pb.js');
goog.object.extend(proto, snap_pb);
goog.exportSymbol('proto.payment.AvailableExternalBank', null, global);
goog.exportSymbol('proto.payment.AvailablePaymentMethod', null, global);
goog.exportSymbol('proto.payment.AvailablePaymentMethodBank', null, global);
goog.exportSymbol('proto.payment.GetAvailableExternalBanksResponse', null, global);
goog.exportSymbol('proto.payment.GetAvailablePaymentMethodsResponse', null, global);
goog.exportSymbol('proto.payment.GetBankSwiftCodeRequest', null, global);
goog.exportSymbol('proto.payment.GetBankSwiftCodeResponse', null, global);
goog.exportSymbol('proto.payment.GetPaymentMethodTypeResponse', null, global);
goog.exportSymbol('proto.payment.PaymentMethods', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.GetAvailablePaymentMethodsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payment.GetAvailablePaymentMethodsResponse.repeatedFields_, null);
};
goog.inherits(proto.payment.GetAvailablePaymentMethodsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.GetAvailablePaymentMethodsResponse.displayName = 'proto.payment.GetAvailablePaymentMethodsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.AvailablePaymentMethod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payment.AvailablePaymentMethod.repeatedFields_, null);
};
goog.inherits(proto.payment.AvailablePaymentMethod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.AvailablePaymentMethod.displayName = 'proto.payment.AvailablePaymentMethod';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.AvailablePaymentMethodBank = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.AvailablePaymentMethodBank, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.AvailablePaymentMethodBank.displayName = 'proto.payment.AvailablePaymentMethodBank';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.PaymentMethods = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.PaymentMethods, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.PaymentMethods.displayName = 'proto.payment.PaymentMethods';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.GetAvailableExternalBanksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payment.GetAvailableExternalBanksResponse.repeatedFields_, null);
};
goog.inherits(proto.payment.GetAvailableExternalBanksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.GetAvailableExternalBanksResponse.displayName = 'proto.payment.GetAvailableExternalBanksResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.AvailableExternalBank = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.AvailableExternalBank, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.AvailableExternalBank.displayName = 'proto.payment.AvailableExternalBank';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.GetBankSwiftCodeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.GetBankSwiftCodeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.GetBankSwiftCodeRequest.displayName = 'proto.payment.GetBankSwiftCodeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.GetBankSwiftCodeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.GetBankSwiftCodeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.GetBankSwiftCodeResponse.displayName = 'proto.payment.GetBankSwiftCodeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.GetPaymentMethodTypeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.payment.GetPaymentMethodTypeResponse.repeatedFields_, null);
};
goog.inherits(proto.payment.GetPaymentMethodTypeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.GetPaymentMethodTypeResponse.displayName = 'proto.payment.GetPaymentMethodTypeResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payment.GetAvailablePaymentMethodsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.GetAvailablePaymentMethodsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.GetAvailablePaymentMethodsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.GetAvailablePaymentMethodsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetAvailablePaymentMethodsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && snap_pb.RPCResponse.toObject(includeInstance, f),
    availablepaymentmethodsList: jspb.Message.toObjectList(msg.getAvailablepaymentmethodsList(),
    proto.payment.AvailablePaymentMethod.toObject, includeInstance),
    jsonstr: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.GetAvailablePaymentMethodsResponse}
 */
proto.payment.GetAvailablePaymentMethodsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.GetAvailablePaymentMethodsResponse;
  return proto.payment.GetAvailablePaymentMethodsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.GetAvailablePaymentMethodsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.GetAvailablePaymentMethodsResponse}
 */
proto.payment.GetAvailablePaymentMethodsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snap_pb.RPCResponse;
      reader.readMessage(value,snap_pb.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = new proto.payment.AvailablePaymentMethod;
      reader.readMessage(value,proto.payment.AvailablePaymentMethod.deserializeBinaryFromReader);
      msg.addAvailablepaymentmethods(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonstr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.GetAvailablePaymentMethodsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.GetAvailablePaymentMethodsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.GetAvailablePaymentMethodsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetAvailablePaymentMethodsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      snap_pb.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getAvailablepaymentmethodsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.payment.AvailablePaymentMethod.serializeBinaryToWriter
    );
  }
  f = message.getJsonstr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional RPCResponse response = 1;
 * @return {?proto.payment.RPCResponse}
 */
proto.payment.GetAvailablePaymentMethodsResponse.prototype.getResponse = function() {
  return /** @type{?proto.payment.RPCResponse} */ (
    jspb.Message.getWrapperField(this, snap_pb.RPCResponse, 1));
};


/**
 * @param {?proto.payment.RPCResponse|undefined} value
 * @return {!proto.payment.GetAvailablePaymentMethodsResponse} returns this
*/
proto.payment.GetAvailablePaymentMethodsResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.GetAvailablePaymentMethodsResponse} returns this
 */
proto.payment.GetAvailablePaymentMethodsResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.GetAvailablePaymentMethodsResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AvailablePaymentMethod availablePaymentMethods = 2;
 * @return {!Array<!proto.payment.AvailablePaymentMethod>}
 */
proto.payment.GetAvailablePaymentMethodsResponse.prototype.getAvailablepaymentmethodsList = function() {
  return /** @type{!Array<!proto.payment.AvailablePaymentMethod>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payment.AvailablePaymentMethod, 2));
};


/**
 * @param {!Array<!proto.payment.AvailablePaymentMethod>} value
 * @return {!proto.payment.GetAvailablePaymentMethodsResponse} returns this
*/
proto.payment.GetAvailablePaymentMethodsResponse.prototype.setAvailablepaymentmethodsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.payment.AvailablePaymentMethod=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payment.AvailablePaymentMethod}
 */
proto.payment.GetAvailablePaymentMethodsResponse.prototype.addAvailablepaymentmethods = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.payment.AvailablePaymentMethod, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payment.GetAvailablePaymentMethodsResponse} returns this
 */
proto.payment.GetAvailablePaymentMethodsResponse.prototype.clearAvailablepaymentmethodsList = function() {
  return this.setAvailablepaymentmethodsList([]);
};


/**
 * optional string jsonStr = 3;
 * @return {string}
 */
proto.payment.GetAvailablePaymentMethodsResponse.prototype.getJsonstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.GetAvailablePaymentMethodsResponse} returns this
 */
proto.payment.GetAvailablePaymentMethodsResponse.prototype.setJsonstr = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payment.AvailablePaymentMethod.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.AvailablePaymentMethod.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.AvailablePaymentMethod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.AvailablePaymentMethod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.AvailablePaymentMethod.toObject = function(includeInstance, msg) {
  var f, obj = {
    bank: (f = msg.getBank()) && proto.payment.AvailablePaymentMethodBank.toObject(includeInstance, f),
    picturepath: jspb.Message.getFieldWithDefault(msg, 2, ""),
    paymentmethodsList: jspb.Message.toObjectList(msg.getPaymentmethodsList(),
    proto.payment.PaymentMethods.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.AvailablePaymentMethod}
 */
proto.payment.AvailablePaymentMethod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.AvailablePaymentMethod;
  return proto.payment.AvailablePaymentMethod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.AvailablePaymentMethod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.AvailablePaymentMethod}
 */
proto.payment.AvailablePaymentMethod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.payment.AvailablePaymentMethodBank;
      reader.readMessage(value,proto.payment.AvailablePaymentMethodBank.deserializeBinaryFromReader);
      msg.setBank(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPicturepath(value);
      break;
    case 3:
      var value = new proto.payment.PaymentMethods;
      reader.readMessage(value,proto.payment.PaymentMethods.deserializeBinaryFromReader);
      msg.addPaymentmethods(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.AvailablePaymentMethod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.AvailablePaymentMethod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.AvailablePaymentMethod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.AvailablePaymentMethod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBank();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.payment.AvailablePaymentMethodBank.serializeBinaryToWriter
    );
  }
  f = message.getPicturepath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPaymentmethodsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.payment.PaymentMethods.serializeBinaryToWriter
    );
  }
};


/**
 * optional AvailablePaymentMethodBank bank = 1;
 * @return {?proto.payment.AvailablePaymentMethodBank}
 */
proto.payment.AvailablePaymentMethod.prototype.getBank = function() {
  return /** @type{?proto.payment.AvailablePaymentMethodBank} */ (
    jspb.Message.getWrapperField(this, proto.payment.AvailablePaymentMethodBank, 1));
};


/**
 * @param {?proto.payment.AvailablePaymentMethodBank|undefined} value
 * @return {!proto.payment.AvailablePaymentMethod} returns this
*/
proto.payment.AvailablePaymentMethod.prototype.setBank = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.AvailablePaymentMethod} returns this
 */
proto.payment.AvailablePaymentMethod.prototype.clearBank = function() {
  return this.setBank(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.AvailablePaymentMethod.prototype.hasBank = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string picturePath = 2;
 * @return {string}
 */
proto.payment.AvailablePaymentMethod.prototype.getPicturepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.AvailablePaymentMethod} returns this
 */
proto.payment.AvailablePaymentMethod.prototype.setPicturepath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated PaymentMethods paymentMethods = 3;
 * @return {!Array<!proto.payment.PaymentMethods>}
 */
proto.payment.AvailablePaymentMethod.prototype.getPaymentmethodsList = function() {
  return /** @type{!Array<!proto.payment.PaymentMethods>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payment.PaymentMethods, 3));
};


/**
 * @param {!Array<!proto.payment.PaymentMethods>} value
 * @return {!proto.payment.AvailablePaymentMethod} returns this
*/
proto.payment.AvailablePaymentMethod.prototype.setPaymentmethodsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.payment.PaymentMethods=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payment.PaymentMethods}
 */
proto.payment.AvailablePaymentMethod.prototype.addPaymentmethods = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.payment.PaymentMethods, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payment.AvailablePaymentMethod} returns this
 */
proto.payment.AvailablePaymentMethod.prototype.clearPaymentmethodsList = function() {
  return this.setPaymentmethodsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.AvailablePaymentMethodBank.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.AvailablePaymentMethodBank.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.AvailablePaymentMethodBank} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.AvailablePaymentMethodBank.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    swiftcode: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.AvailablePaymentMethodBank}
 */
proto.payment.AvailablePaymentMethodBank.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.AvailablePaymentMethodBank;
  return proto.payment.AvailablePaymentMethodBank.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.AvailablePaymentMethodBank} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.AvailablePaymentMethodBank}
 */
proto.payment.AvailablePaymentMethodBank.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSwiftcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.AvailablePaymentMethodBank.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.AvailablePaymentMethodBank.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.AvailablePaymentMethodBank} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.AvailablePaymentMethodBank.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSwiftcode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.payment.AvailablePaymentMethodBank.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.payment.AvailablePaymentMethodBank} returns this
 */
proto.payment.AvailablePaymentMethodBank.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.payment.AvailablePaymentMethodBank.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.AvailablePaymentMethodBank} returns this
 */
proto.payment.AvailablePaymentMethodBank.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string swiftCode = 3;
 * @return {string}
 */
proto.payment.AvailablePaymentMethodBank.prototype.getSwiftcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.AvailablePaymentMethodBank} returns this
 */
proto.payment.AvailablePaymentMethodBank.prototype.setSwiftcode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.PaymentMethods.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.PaymentMethods.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.PaymentMethods} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.PaymentMethods.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    paymentmethod: (f = msg.getPaymentmethod()) && snap_pb.SnapHelper.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.PaymentMethods}
 */
proto.payment.PaymentMethods.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.PaymentMethods;
  return proto.payment.PaymentMethods.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.PaymentMethods} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.PaymentMethods}
 */
proto.payment.PaymentMethods.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new snap_pb.SnapHelper;
      reader.readMessage(value,snap_pb.SnapHelper.deserializeBinaryFromReader);
      msg.setPaymentmethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.PaymentMethods.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.PaymentMethods.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.PaymentMethods} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.PaymentMethods.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPaymentmethod();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      snap_pb.SnapHelper.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.payment.PaymentMethods.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.payment.PaymentMethods} returns this
 */
proto.payment.PaymentMethods.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional SnapHelper paymentMethod = 2;
 * @return {?proto.payment.SnapHelper}
 */
proto.payment.PaymentMethods.prototype.getPaymentmethod = function() {
  return /** @type{?proto.payment.SnapHelper} */ (
    jspb.Message.getWrapperField(this, snap_pb.SnapHelper, 2));
};


/**
 * @param {?proto.payment.SnapHelper|undefined} value
 * @return {!proto.payment.PaymentMethods} returns this
*/
proto.payment.PaymentMethods.prototype.setPaymentmethod = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.PaymentMethods} returns this
 */
proto.payment.PaymentMethods.prototype.clearPaymentmethod = function() {
  return this.setPaymentmethod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.PaymentMethods.prototype.hasPaymentmethod = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payment.GetAvailableExternalBanksResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.GetAvailableExternalBanksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.GetAvailableExternalBanksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.GetAvailableExternalBanksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetAvailableExternalBanksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && snap_pb.RPCResponse.toObject(includeInstance, f),
    availableexternalbanksList: jspb.Message.toObjectList(msg.getAvailableexternalbanksList(),
    proto.payment.AvailableExternalBank.toObject, includeInstance),
    jsonstr: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.GetAvailableExternalBanksResponse}
 */
proto.payment.GetAvailableExternalBanksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.GetAvailableExternalBanksResponse;
  return proto.payment.GetAvailableExternalBanksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.GetAvailableExternalBanksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.GetAvailableExternalBanksResponse}
 */
proto.payment.GetAvailableExternalBanksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snap_pb.RPCResponse;
      reader.readMessage(value,snap_pb.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = new proto.payment.AvailableExternalBank;
      reader.readMessage(value,proto.payment.AvailableExternalBank.deserializeBinaryFromReader);
      msg.addAvailableexternalbanks(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonstr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.GetAvailableExternalBanksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.GetAvailableExternalBanksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.GetAvailableExternalBanksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetAvailableExternalBanksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      snap_pb.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getAvailableexternalbanksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.payment.AvailableExternalBank.serializeBinaryToWriter
    );
  }
  f = message.getJsonstr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional RPCResponse response = 1;
 * @return {?proto.payment.RPCResponse}
 */
proto.payment.GetAvailableExternalBanksResponse.prototype.getResponse = function() {
  return /** @type{?proto.payment.RPCResponse} */ (
    jspb.Message.getWrapperField(this, snap_pb.RPCResponse, 1));
};


/**
 * @param {?proto.payment.RPCResponse|undefined} value
 * @return {!proto.payment.GetAvailableExternalBanksResponse} returns this
*/
proto.payment.GetAvailableExternalBanksResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.GetAvailableExternalBanksResponse} returns this
 */
proto.payment.GetAvailableExternalBanksResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.GetAvailableExternalBanksResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AvailableExternalBank availableExternalBanks = 2;
 * @return {!Array<!proto.payment.AvailableExternalBank>}
 */
proto.payment.GetAvailableExternalBanksResponse.prototype.getAvailableexternalbanksList = function() {
  return /** @type{!Array<!proto.payment.AvailableExternalBank>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.payment.AvailableExternalBank, 2));
};


/**
 * @param {!Array<!proto.payment.AvailableExternalBank>} value
 * @return {!proto.payment.GetAvailableExternalBanksResponse} returns this
*/
proto.payment.GetAvailableExternalBanksResponse.prototype.setAvailableexternalbanksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.payment.AvailableExternalBank=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payment.AvailableExternalBank}
 */
proto.payment.GetAvailableExternalBanksResponse.prototype.addAvailableexternalbanks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.payment.AvailableExternalBank, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payment.GetAvailableExternalBanksResponse} returns this
 */
proto.payment.GetAvailableExternalBanksResponse.prototype.clearAvailableexternalbanksList = function() {
  return this.setAvailableexternalbanksList([]);
};


/**
 * optional string jsonStr = 3;
 * @return {string}
 */
proto.payment.GetAvailableExternalBanksResponse.prototype.getJsonstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.GetAvailableExternalBanksResponse} returns this
 */
proto.payment.GetAvailableExternalBanksResponse.prototype.setJsonstr = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.AvailableExternalBank.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.AvailableExternalBank.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.AvailableExternalBank} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.AvailableExternalBank.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    swiftcode: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.AvailableExternalBank}
 */
proto.payment.AvailableExternalBank.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.AvailableExternalBank;
  return proto.payment.AvailableExternalBank.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.AvailableExternalBank} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.AvailableExternalBank}
 */
proto.payment.AvailableExternalBank.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSwiftcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.AvailableExternalBank.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.AvailableExternalBank.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.AvailableExternalBank} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.AvailableExternalBank.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSwiftcode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.payment.AvailableExternalBank.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.AvailableExternalBank} returns this
 */
proto.payment.AvailableExternalBank.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string swiftCode = 2;
 * @return {string}
 */
proto.payment.AvailableExternalBank.prototype.getSwiftcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.AvailableExternalBank} returns this
 */
proto.payment.AvailableExternalBank.prototype.setSwiftcode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.GetBankSwiftCodeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.GetBankSwiftCodeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.GetBankSwiftCodeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetBankSwiftCodeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bankname: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.GetBankSwiftCodeRequest}
 */
proto.payment.GetBankSwiftCodeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.GetBankSwiftCodeRequest;
  return proto.payment.GetBankSwiftCodeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.GetBankSwiftCodeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.GetBankSwiftCodeRequest}
 */
proto.payment.GetBankSwiftCodeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBankname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.GetBankSwiftCodeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.GetBankSwiftCodeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.GetBankSwiftCodeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetBankSwiftCodeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBankname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string bankName = 1;
 * @return {string}
 */
proto.payment.GetBankSwiftCodeRequest.prototype.getBankname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.GetBankSwiftCodeRequest} returns this
 */
proto.payment.GetBankSwiftCodeRequest.prototype.setBankname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.GetBankSwiftCodeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.GetBankSwiftCodeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.GetBankSwiftCodeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetBankSwiftCodeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && snap_pb.RPCResponse.toObject(includeInstance, f),
    bankname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    swiftcode: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.GetBankSwiftCodeResponse}
 */
proto.payment.GetBankSwiftCodeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.GetBankSwiftCodeResponse;
  return proto.payment.GetBankSwiftCodeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.GetBankSwiftCodeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.GetBankSwiftCodeResponse}
 */
proto.payment.GetBankSwiftCodeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snap_pb.RPCResponse;
      reader.readMessage(value,snap_pb.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBankname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSwiftcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.GetBankSwiftCodeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.GetBankSwiftCodeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.GetBankSwiftCodeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetBankSwiftCodeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      snap_pb.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getBankname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSwiftcode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional RPCResponse response = 1;
 * @return {?proto.payment.RPCResponse}
 */
proto.payment.GetBankSwiftCodeResponse.prototype.getResponse = function() {
  return /** @type{?proto.payment.RPCResponse} */ (
    jspb.Message.getWrapperField(this, snap_pb.RPCResponse, 1));
};


/**
 * @param {?proto.payment.RPCResponse|undefined} value
 * @return {!proto.payment.GetBankSwiftCodeResponse} returns this
*/
proto.payment.GetBankSwiftCodeResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.GetBankSwiftCodeResponse} returns this
 */
proto.payment.GetBankSwiftCodeResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.GetBankSwiftCodeResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string bankName = 2;
 * @return {string}
 */
proto.payment.GetBankSwiftCodeResponse.prototype.getBankname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.GetBankSwiftCodeResponse} returns this
 */
proto.payment.GetBankSwiftCodeResponse.prototype.setBankname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string swiftCode = 3;
 * @return {string}
 */
proto.payment.GetBankSwiftCodeResponse.prototype.getSwiftcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.GetBankSwiftCodeResponse} returns this
 */
proto.payment.GetBankSwiftCodeResponse.prototype.setSwiftcode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.payment.GetPaymentMethodTypeResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.GetPaymentMethodTypeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.GetPaymentMethodTypeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.GetPaymentMethodTypeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetPaymentMethodTypeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && snap_pb.RPCResponse.toObject(includeInstance, f),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    snap_pb.SnapHelper.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.GetPaymentMethodTypeResponse}
 */
proto.payment.GetPaymentMethodTypeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.GetPaymentMethodTypeResponse;
  return proto.payment.GetPaymentMethodTypeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.GetPaymentMethodTypeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.GetPaymentMethodTypeResponse}
 */
proto.payment.GetPaymentMethodTypeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snap_pb.RPCResponse;
      reader.readMessage(value,snap_pb.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = new snap_pb.SnapHelper;
      reader.readMessage(value,snap_pb.SnapHelper.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.GetPaymentMethodTypeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.GetPaymentMethodTypeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.GetPaymentMethodTypeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetPaymentMethodTypeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      snap_pb.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      snap_pb.SnapHelper.serializeBinaryToWriter
    );
  }
};


/**
 * optional RPCResponse response = 1;
 * @return {?proto.payment.RPCResponse}
 */
proto.payment.GetPaymentMethodTypeResponse.prototype.getResponse = function() {
  return /** @type{?proto.payment.RPCResponse} */ (
    jspb.Message.getWrapperField(this, snap_pb.RPCResponse, 1));
};


/**
 * @param {?proto.payment.RPCResponse|undefined} value
 * @return {!proto.payment.GetPaymentMethodTypeResponse} returns this
*/
proto.payment.GetPaymentMethodTypeResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.GetPaymentMethodTypeResponse} returns this
 */
proto.payment.GetPaymentMethodTypeResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.GetPaymentMethodTypeResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SnapHelper data = 2;
 * @return {!Array<!proto.payment.SnapHelper>}
 */
proto.payment.GetPaymentMethodTypeResponse.prototype.getDataList = function() {
  return /** @type{!Array<!proto.payment.SnapHelper>} */ (
    jspb.Message.getRepeatedWrapperField(this, snap_pb.SnapHelper, 2));
};


/**
 * @param {!Array<!proto.payment.SnapHelper>} value
 * @return {!proto.payment.GetPaymentMethodTypeResponse} returns this
*/
proto.payment.GetPaymentMethodTypeResponse.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.payment.SnapHelper=} opt_value
 * @param {number=} opt_index
 * @return {!proto.payment.SnapHelper}
 */
proto.payment.GetPaymentMethodTypeResponse.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.payment.SnapHelper, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.payment.GetPaymentMethodTypeResponse} returns this
 */
proto.payment.GetPaymentMethodTypeResponse.prototype.clearDataList = function() {
  return this.setDataList([]);
};


goog.object.extend(exports, proto.payment);
