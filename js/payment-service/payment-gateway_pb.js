// source: payment-gateway.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var snap_pb = require('./snap_pb.js');
goog.object.extend(proto, snap_pb);
goog.exportSymbol('proto.payment.AppReference', null, global);
goog.exportSymbol('proto.payment.BankInfo', null, global);
goog.exportSymbol('proto.payment.GetVirtualAccountInfoRequest', null, global);
goog.exportSymbol('proto.payment.GetVirtualAccountInfoResponse', null, global);
goog.exportSymbol('proto.payment.VirtualAccountData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.GetVirtualAccountInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.GetVirtualAccountInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.GetVirtualAccountInfoRequest.displayName = 'proto.payment.GetVirtualAccountInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.GetVirtualAccountInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.GetVirtualAccountInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.GetVirtualAccountInfoResponse.displayName = 'proto.payment.GetVirtualAccountInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.VirtualAccountData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.VirtualAccountData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.VirtualAccountData.displayName = 'proto.payment.VirtualAccountData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.AppReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.AppReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.AppReference.displayName = 'proto.payment.AppReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.BankInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.BankInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.BankInfo.displayName = 'proto.payment.BankInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.GetVirtualAccountInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.GetVirtualAccountInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.GetVirtualAccountInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetVirtualAccountInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionidentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    idbank: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.GetVirtualAccountInfoRequest}
 */
proto.payment.GetVirtualAccountInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.GetVirtualAccountInfoRequest;
  return proto.payment.GetVirtualAccountInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.GetVirtualAccountInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.GetVirtualAccountInfoRequest}
 */
proto.payment.GetVirtualAccountInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionidentifier(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdbank(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.GetVirtualAccountInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.GetVirtualAccountInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.GetVirtualAccountInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetVirtualAccountInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionidentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdbank();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string transactionIdentifier = 1;
 * @return {string}
 */
proto.payment.GetVirtualAccountInfoRequest.prototype.getTransactionidentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.GetVirtualAccountInfoRequest} returns this
 */
proto.payment.GetVirtualAccountInfoRequest.prototype.setTransactionidentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 idBank = 2;
 * @return {number}
 */
proto.payment.GetVirtualAccountInfoRequest.prototype.getIdbank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.payment.GetVirtualAccountInfoRequest} returns this
 */
proto.payment.GetVirtualAccountInfoRequest.prototype.setIdbank = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.GetVirtualAccountInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.GetVirtualAccountInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetVirtualAccountInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && snap_pb.RPCResponse.toObject(includeInstance, f),
    vadata: (f = msg.getVadata()) && proto.payment.VirtualAccountData.toObject(includeInstance, f),
    jsonstr: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.GetVirtualAccountInfoResponse}
 */
proto.payment.GetVirtualAccountInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.GetVirtualAccountInfoResponse;
  return proto.payment.GetVirtualAccountInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.GetVirtualAccountInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.GetVirtualAccountInfoResponse}
 */
proto.payment.GetVirtualAccountInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snap_pb.RPCResponse;
      reader.readMessage(value,snap_pb.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = new proto.payment.VirtualAccountData;
      reader.readMessage(value,proto.payment.VirtualAccountData.deserializeBinaryFromReader);
      msg.setVadata(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonstr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.GetVirtualAccountInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.GetVirtualAccountInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetVirtualAccountInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      snap_pb.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getVadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.payment.VirtualAccountData.serializeBinaryToWriter
    );
  }
  f = message.getJsonstr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional RPCResponse response = 1;
 * @return {?proto.payment.RPCResponse}
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.getResponse = function() {
  return /** @type{?proto.payment.RPCResponse} */ (
    jspb.Message.getWrapperField(this, snap_pb.RPCResponse, 1));
};


/**
 * @param {?proto.payment.RPCResponse|undefined} value
 * @return {!proto.payment.GetVirtualAccountInfoResponse} returns this
*/
proto.payment.GetVirtualAccountInfoResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.GetVirtualAccountInfoResponse} returns this
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VirtualAccountData vaData = 2;
 * @return {?proto.payment.VirtualAccountData}
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.getVadata = function() {
  return /** @type{?proto.payment.VirtualAccountData} */ (
    jspb.Message.getWrapperField(this, proto.payment.VirtualAccountData, 2));
};


/**
 * @param {?proto.payment.VirtualAccountData|undefined} value
 * @return {!proto.payment.GetVirtualAccountInfoResponse} returns this
*/
proto.payment.GetVirtualAccountInfoResponse.prototype.setVadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.GetVirtualAccountInfoResponse} returns this
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.clearVadata = function() {
  return this.setVadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.hasVadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string jsonStr = 3;
 * @return {string}
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.getJsonstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.GetVirtualAccountInfoResponse} returns this
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.setJsonstr = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.VirtualAccountData.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.VirtualAccountData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.VirtualAccountData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.VirtualAccountData.toObject = function(includeInstance, msg) {
  var f, obj = {
    appinfo: (f = msg.getAppinfo()) && snap_pb.SnapHelper.toObject(includeInstance, f),
    bankinfo: (f = msg.getBankinfo()) && proto.payment.BankInfo.toObject(includeInstance, f),
    id: jspb.Message.getFieldWithDefault(msg, 3, ""),
    status: (f = msg.getStatus()) && snap_pb.SnapHelper.toObject(includeInstance, f),
    appreference: (f = msg.getAppreference()) && proto.payment.AppReference.toObject(includeInstance, f),
    expiredate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    virtualaccountno: jspb.Message.getFieldWithDefault(msg, 7, ""),
    virtualaccountname: jspb.Message.getFieldWithDefault(msg, 8, ""),
    totalamount: (f = msg.getTotalamount()) && snap_pb.BalanceAmount.toObject(includeInstance, f),
    feeamount: (f = msg.getFeeamount()) && snap_pb.BalanceAmount.toObject(includeInstance, f),
    paidamount: (f = msg.getPaidamount()) && snap_pb.BalanceAmount.toObject(includeInstance, f),
    createat: jspb.Message.getFieldWithDefault(msg, 12, ""),
    updateat: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.VirtualAccountData}
 */
proto.payment.VirtualAccountData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.VirtualAccountData;
  return proto.payment.VirtualAccountData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.VirtualAccountData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.VirtualAccountData}
 */
proto.payment.VirtualAccountData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snap_pb.SnapHelper;
      reader.readMessage(value,snap_pb.SnapHelper.deserializeBinaryFromReader);
      msg.setAppinfo(value);
      break;
    case 2:
      var value = new proto.payment.BankInfo;
      reader.readMessage(value,proto.payment.BankInfo.deserializeBinaryFromReader);
      msg.setBankinfo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 4:
      var value = new snap_pb.SnapHelper;
      reader.readMessage(value,snap_pb.SnapHelper.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 5:
      var value = new proto.payment.AppReference;
      reader.readMessage(value,proto.payment.AppReference.deserializeBinaryFromReader);
      msg.setAppreference(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpiredate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVirtualaccountno(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setVirtualaccountname(value);
      break;
    case 9:
      var value = new snap_pb.BalanceAmount;
      reader.readMessage(value,snap_pb.BalanceAmount.deserializeBinaryFromReader);
      msg.setTotalamount(value);
      break;
    case 10:
      var value = new snap_pb.BalanceAmount;
      reader.readMessage(value,snap_pb.BalanceAmount.deserializeBinaryFromReader);
      msg.setFeeamount(value);
      break;
    case 11:
      var value = new snap_pb.BalanceAmount;
      reader.readMessage(value,snap_pb.BalanceAmount.deserializeBinaryFromReader);
      msg.setPaidamount(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreateat(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdateat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.VirtualAccountData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.VirtualAccountData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.VirtualAccountData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.VirtualAccountData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAppinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      snap_pb.SnapHelper.serializeBinaryToWriter
    );
  }
  f = message.getBankinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.payment.BankInfo.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      snap_pb.SnapHelper.serializeBinaryToWriter
    );
  }
  f = message.getAppreference();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.payment.AppReference.serializeBinaryToWriter
    );
  }
  f = message.getExpiredate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getVirtualaccountno();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getVirtualaccountname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getTotalamount();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      snap_pb.BalanceAmount.serializeBinaryToWriter
    );
  }
  f = message.getFeeamount();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      snap_pb.BalanceAmount.serializeBinaryToWriter
    );
  }
  f = message.getPaidamount();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      snap_pb.BalanceAmount.serializeBinaryToWriter
    );
  }
  f = message.getCreateat();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getUpdateat();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional SnapHelper appInfo = 1;
 * @return {?proto.payment.SnapHelper}
 */
proto.payment.VirtualAccountData.prototype.getAppinfo = function() {
  return /** @type{?proto.payment.SnapHelper} */ (
    jspb.Message.getWrapperField(this, snap_pb.SnapHelper, 1));
};


/**
 * @param {?proto.payment.SnapHelper|undefined} value
 * @return {!proto.payment.VirtualAccountData} returns this
*/
proto.payment.VirtualAccountData.prototype.setAppinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.clearAppinfo = function() {
  return this.setAppinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.VirtualAccountData.prototype.hasAppinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BankInfo bankInfo = 2;
 * @return {?proto.payment.BankInfo}
 */
proto.payment.VirtualAccountData.prototype.getBankinfo = function() {
  return /** @type{?proto.payment.BankInfo} */ (
    jspb.Message.getWrapperField(this, proto.payment.BankInfo, 2));
};


/**
 * @param {?proto.payment.BankInfo|undefined} value
 * @return {!proto.payment.VirtualAccountData} returns this
*/
proto.payment.VirtualAccountData.prototype.setBankinfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.clearBankinfo = function() {
  return this.setBankinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.VirtualAccountData.prototype.hasBankinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string id = 3;
 * @return {string}
 */
proto.payment.VirtualAccountData.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SnapHelper status = 4;
 * @return {?proto.payment.SnapHelper}
 */
proto.payment.VirtualAccountData.prototype.getStatus = function() {
  return /** @type{?proto.payment.SnapHelper} */ (
    jspb.Message.getWrapperField(this, snap_pb.SnapHelper, 4));
};


/**
 * @param {?proto.payment.SnapHelper|undefined} value
 * @return {!proto.payment.VirtualAccountData} returns this
*/
proto.payment.VirtualAccountData.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.VirtualAccountData.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AppReference appReference = 5;
 * @return {?proto.payment.AppReference}
 */
proto.payment.VirtualAccountData.prototype.getAppreference = function() {
  return /** @type{?proto.payment.AppReference} */ (
    jspb.Message.getWrapperField(this, proto.payment.AppReference, 5));
};


/**
 * @param {?proto.payment.AppReference|undefined} value
 * @return {!proto.payment.VirtualAccountData} returns this
*/
proto.payment.VirtualAccountData.prototype.setAppreference = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.clearAppreference = function() {
  return this.setAppreference(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.VirtualAccountData.prototype.hasAppreference = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string expireDate = 6;
 * @return {string}
 */
proto.payment.VirtualAccountData.prototype.getExpiredate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.setExpiredate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string virtualAccountNo = 7;
 * @return {string}
 */
proto.payment.VirtualAccountData.prototype.getVirtualaccountno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.setVirtualaccountno = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string virtualAccountName = 8;
 * @return {string}
 */
proto.payment.VirtualAccountData.prototype.getVirtualaccountname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.setVirtualaccountname = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional BalanceAmount totalAmount = 9;
 * @return {?proto.payment.BalanceAmount}
 */
proto.payment.VirtualAccountData.prototype.getTotalamount = function() {
  return /** @type{?proto.payment.BalanceAmount} */ (
    jspb.Message.getWrapperField(this, snap_pb.BalanceAmount, 9));
};


/**
 * @param {?proto.payment.BalanceAmount|undefined} value
 * @return {!proto.payment.VirtualAccountData} returns this
*/
proto.payment.VirtualAccountData.prototype.setTotalamount = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.clearTotalamount = function() {
  return this.setTotalamount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.VirtualAccountData.prototype.hasTotalamount = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional BalanceAmount feeAmount = 10;
 * @return {?proto.payment.BalanceAmount}
 */
proto.payment.VirtualAccountData.prototype.getFeeamount = function() {
  return /** @type{?proto.payment.BalanceAmount} */ (
    jspb.Message.getWrapperField(this, snap_pb.BalanceAmount, 10));
};


/**
 * @param {?proto.payment.BalanceAmount|undefined} value
 * @return {!proto.payment.VirtualAccountData} returns this
*/
proto.payment.VirtualAccountData.prototype.setFeeamount = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.clearFeeamount = function() {
  return this.setFeeamount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.VirtualAccountData.prototype.hasFeeamount = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional BalanceAmount paidAmount = 11;
 * @return {?proto.payment.BalanceAmount}
 */
proto.payment.VirtualAccountData.prototype.getPaidamount = function() {
  return /** @type{?proto.payment.BalanceAmount} */ (
    jspb.Message.getWrapperField(this, snap_pb.BalanceAmount, 11));
};


/**
 * @param {?proto.payment.BalanceAmount|undefined} value
 * @return {!proto.payment.VirtualAccountData} returns this
*/
proto.payment.VirtualAccountData.prototype.setPaidamount = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.clearPaidamount = function() {
  return this.setPaidamount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.VirtualAccountData.prototype.hasPaidamount = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string createAt = 12;
 * @return {string}
 */
proto.payment.VirtualAccountData.prototype.getCreateat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.setCreateat = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string updateAt = 13;
 * @return {string}
 */
proto.payment.VirtualAccountData.prototype.getUpdateat = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.setUpdateat = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.AppReference.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.AppReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.AppReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.AppReference.toObject = function(includeInstance, msg) {
  var f, obj = {
    trxid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    trxidentifier: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.AppReference}
 */
proto.payment.AppReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.AppReference;
  return proto.payment.AppReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.AppReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.AppReference}
 */
proto.payment.AppReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTrxid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrxidentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.AppReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.AppReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.AppReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.AppReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTrxid();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTrxidentifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 trxId = 1;
 * @return {number}
 */
proto.payment.AppReference.prototype.getTrxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.payment.AppReference} returns this
 */
proto.payment.AppReference.prototype.setTrxid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string trxIdentifier = 2;
 * @return {string}
 */
proto.payment.AppReference.prototype.getTrxidentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.AppReference} returns this
 */
proto.payment.AppReference.prototype.setTrxidentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.BankInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.BankInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.BankInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.BankInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    picturepath: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.BankInfo}
 */
proto.payment.BankInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.BankInfo;
  return proto.payment.BankInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.BankInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.BankInfo}
 */
proto.payment.BankInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPicturepath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.BankInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.BankInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.BankInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.BankInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPicturepath();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.payment.BankInfo.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.payment.BankInfo} returns this
 */
proto.payment.BankInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.payment.BankInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.BankInfo} returns this
 */
proto.payment.BankInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string picturePath = 3;
 * @return {string}
 */
proto.payment.BankInfo.prototype.getPicturepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.BankInfo} returns this
 */
proto.payment.BankInfo.prototype.setPicturepath = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.payment);
