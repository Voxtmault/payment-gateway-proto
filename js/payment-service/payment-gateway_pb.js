// source: payment-gateway.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var snap_pb = require('./snap_pb.js');
goog.object.extend(proto, snap_pb);
goog.exportSymbol('proto.payment.GetVirtualAccountInfoRequest', null, global);
goog.exportSymbol('proto.payment.GetVirtualAccountInfoResponse', null, global);
goog.exportSymbol('proto.payment.VirtualAccountData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.GetVirtualAccountInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.GetVirtualAccountInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.GetVirtualAccountInfoRequest.displayName = 'proto.payment.GetVirtualAccountInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.GetVirtualAccountInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.GetVirtualAccountInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.GetVirtualAccountInfoResponse.displayName = 'proto.payment.GetVirtualAccountInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.payment.VirtualAccountData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.payment.VirtualAccountData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.payment.VirtualAccountData.displayName = 'proto.payment.VirtualAccountData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.GetVirtualAccountInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.GetVirtualAccountInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.GetVirtualAccountInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetVirtualAccountInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionidentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    idbank: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.GetVirtualAccountInfoRequest}
 */
proto.payment.GetVirtualAccountInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.GetVirtualAccountInfoRequest;
  return proto.payment.GetVirtualAccountInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.GetVirtualAccountInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.GetVirtualAccountInfoRequest}
 */
proto.payment.GetVirtualAccountInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionidentifier(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdbank(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.GetVirtualAccountInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.GetVirtualAccountInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.GetVirtualAccountInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetVirtualAccountInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionidentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdbank();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string transactionIdentifier = 1;
 * @return {string}
 */
proto.payment.GetVirtualAccountInfoRequest.prototype.getTransactionidentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.GetVirtualAccountInfoRequest} returns this
 */
proto.payment.GetVirtualAccountInfoRequest.prototype.setTransactionidentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 idBank = 2;
 * @return {number}
 */
proto.payment.GetVirtualAccountInfoRequest.prototype.getIdbank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.payment.GetVirtualAccountInfoRequest} returns this
 */
proto.payment.GetVirtualAccountInfoRequest.prototype.setIdbank = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.GetVirtualAccountInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.GetVirtualAccountInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetVirtualAccountInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && snap_pb.RPCResponse.toObject(includeInstance, f),
    vadata: (f = msg.getVadata()) && proto.payment.VirtualAccountData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.GetVirtualAccountInfoResponse}
 */
proto.payment.GetVirtualAccountInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.GetVirtualAccountInfoResponse;
  return proto.payment.GetVirtualAccountInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.GetVirtualAccountInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.GetVirtualAccountInfoResponse}
 */
proto.payment.GetVirtualAccountInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snap_pb.RPCResponse;
      reader.readMessage(value,snap_pb.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = new proto.payment.VirtualAccountData;
      reader.readMessage(value,proto.payment.VirtualAccountData.deserializeBinaryFromReader);
      msg.setVadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.GetVirtualAccountInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.GetVirtualAccountInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.GetVirtualAccountInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      snap_pb.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getVadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.payment.VirtualAccountData.serializeBinaryToWriter
    );
  }
};


/**
 * optional RPCResponse response = 1;
 * @return {?proto.payment.RPCResponse}
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.getResponse = function() {
  return /** @type{?proto.payment.RPCResponse} */ (
    jspb.Message.getWrapperField(this, snap_pb.RPCResponse, 1));
};


/**
 * @param {?proto.payment.RPCResponse|undefined} value
 * @return {!proto.payment.GetVirtualAccountInfoResponse} returns this
*/
proto.payment.GetVirtualAccountInfoResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.GetVirtualAccountInfoResponse} returns this
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VirtualAccountData vaData = 2;
 * @return {?proto.payment.VirtualAccountData}
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.getVadata = function() {
  return /** @type{?proto.payment.VirtualAccountData} */ (
    jspb.Message.getWrapperField(this, proto.payment.VirtualAccountData, 2));
};


/**
 * @param {?proto.payment.VirtualAccountData|undefined} value
 * @return {!proto.payment.GetVirtualAccountInfoResponse} returns this
*/
proto.payment.GetVirtualAccountInfoResponse.prototype.setVadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.GetVirtualAccountInfoResponse} returns this
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.clearVadata = function() {
  return this.setVadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.GetVirtualAccountInfoResponse.prototype.hasVadata = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.payment.VirtualAccountData.prototype.toObject = function(opt_includeInstance) {
  return proto.payment.VirtualAccountData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.payment.VirtualAccountData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.VirtualAccountData.toObject = function(includeInstance, msg) {
  var f, obj = {
    vanum: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expiredate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transactionidentifier: jspb.Message.getFieldWithDefault(msg, 3, ""),
    bankinfo: (f = msg.getBankinfo()) && snap_pb.Bank.toObject(includeInstance, f),
    vaaccountname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    totalamount: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.payment.VirtualAccountData}
 */
proto.payment.VirtualAccountData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.payment.VirtualAccountData;
  return proto.payment.VirtualAccountData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.payment.VirtualAccountData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.payment.VirtualAccountData}
 */
proto.payment.VirtualAccountData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVanum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpiredate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionidentifier(value);
      break;
    case 4:
      var value = new snap_pb.Bank;
      reader.readMessage(value,snap_pb.Bank.deserializeBinaryFromReader);
      msg.setBankinfo(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVaaccountname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalamount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.payment.VirtualAccountData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.payment.VirtualAccountData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.payment.VirtualAccountData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.payment.VirtualAccountData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVanum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpiredate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransactionidentifier();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBankinfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      snap_pb.Bank.serializeBinaryToWriter
    );
  }
  f = message.getVaaccountname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTotalamount();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string vaNum = 1;
 * @return {string}
 */
proto.payment.VirtualAccountData.prototype.getVanum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.setVanum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string expireDate = 2;
 * @return {string}
 */
proto.payment.VirtualAccountData.prototype.getExpiredate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.setExpiredate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transactionIdentifier = 3;
 * @return {string}
 */
proto.payment.VirtualAccountData.prototype.getTransactionidentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.setTransactionidentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Bank bankInfo = 4;
 * @return {?proto.payment.Bank}
 */
proto.payment.VirtualAccountData.prototype.getBankinfo = function() {
  return /** @type{?proto.payment.Bank} */ (
    jspb.Message.getWrapperField(this, snap_pb.Bank, 4));
};


/**
 * @param {?proto.payment.Bank|undefined} value
 * @return {!proto.payment.VirtualAccountData} returns this
*/
proto.payment.VirtualAccountData.prototype.setBankinfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.clearBankinfo = function() {
  return this.setBankinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.payment.VirtualAccountData.prototype.hasBankinfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string vaAccountName = 5;
 * @return {string}
 */
proto.payment.VirtualAccountData.prototype.getVaaccountname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.setVaaccountname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string totalAmount = 6;
 * @return {string}
 */
proto.payment.VirtualAccountData.prototype.getTotalamount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.payment.VirtualAccountData} returns this
 */
proto.payment.VirtualAccountData.prototype.setTotalamount = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


goog.object.extend(exports, proto.payment);
