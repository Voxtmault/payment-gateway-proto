// source: snap.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.snap.AddVirtualAccountRequest', null, global);
goog.exportSymbol('proto.snap.AddVirtualAccountResponse', null, global);
goog.exportSymbol('proto.snap.BalanceAmount', null, global);
goog.exportSymbol('proto.snap.BalanceDetails', null, global);
goog.exportSymbol('proto.snap.BalanceInquiryResponse', null, global);
goog.exportSymbol('proto.snap.BankStatementBalance', null, global);
goog.exportSymbol('proto.snap.BankStatementBalanceDetail', null, global);
goog.exportSymbol('proto.snap.BankStatementDetail', null, global);
goog.exportSymbol('proto.snap.BankStatementRequest', null, global);
goog.exportSymbol('proto.snap.BankStatementResponse', null, global);
goog.exportSymbol('proto.snap.BankTransactionEntry', null, global);
goog.exportSymbol('proto.snap.BankTransferResponse', null, global);
goog.exportSymbol('proto.snap.Empty', null, global);
goog.exportSymbol('proto.snap.ExternalAccountInquiryRequest', null, global);
goog.exportSymbol('proto.snap.ExternalAccountInquiryResponse', null, global);
goog.exportSymbol('proto.snap.HintText', null, global);
goog.exportSymbol('proto.snap.InternalAccountInquiryRequest', null, global);
goog.exportSymbol('proto.snap.InternalAccountInquiryResponse', null, global);
goog.exportSymbol('proto.snap.RPCResponse', null, global);
goog.exportSymbol('proto.snap.TransferInterBankRequest', null, global);
goog.exportSymbol('proto.snap.TransferIntraBankRequest', null, global);
goog.exportSymbol('proto.snap.VirtualAccountStatusInquiryRequest', null, global);
goog.exportSymbol('proto.snap.VirtualAccountStatusInquiryResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.RPCResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.RPCResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.RPCResponse.displayName = 'proto.snap.RPCResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.Empty.displayName = 'proto.snap.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.AddVirtualAccountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.AddVirtualAccountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.AddVirtualAccountRequest.displayName = 'proto.snap.AddVirtualAccountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.AddVirtualAccountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.AddVirtualAccountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.AddVirtualAccountResponse.displayName = 'proto.snap.AddVirtualAccountResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.BalanceInquiryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.BalanceInquiryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.BalanceInquiryResponse.displayName = 'proto.snap.BalanceInquiryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.BankStatementRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.BankStatementRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.BankStatementRequest.displayName = 'proto.snap.BankStatementRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.BankStatementResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.snap.BankStatementResponse.repeatedFields_, null);
};
goog.inherits(proto.snap.BankStatementResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.BankStatementResponse.displayName = 'proto.snap.BankStatementResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.TransferIntraBankRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.TransferIntraBankRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.TransferIntraBankRequest.displayName = 'proto.snap.TransferIntraBankRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.TransferInterBankRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.TransferInterBankRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.TransferInterBankRequest.displayName = 'proto.snap.TransferInterBankRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.BankTransferResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.BankTransferResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.BankTransferResponse.displayName = 'proto.snap.BankTransferResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.ExternalAccountInquiryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.ExternalAccountInquiryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.ExternalAccountInquiryRequest.displayName = 'proto.snap.ExternalAccountInquiryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.ExternalAccountInquiryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.ExternalAccountInquiryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.ExternalAccountInquiryResponse.displayName = 'proto.snap.ExternalAccountInquiryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.InternalAccountInquiryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.InternalAccountInquiryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.InternalAccountInquiryRequest.displayName = 'proto.snap.InternalAccountInquiryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.InternalAccountInquiryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.InternalAccountInquiryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.InternalAccountInquiryResponse.displayName = 'proto.snap.InternalAccountInquiryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.VirtualAccountStatusInquiryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.VirtualAccountStatusInquiryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.VirtualAccountStatusInquiryRequest.displayName = 'proto.snap.VirtualAccountStatusInquiryRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.VirtualAccountStatusInquiryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.VirtualAccountStatusInquiryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.VirtualAccountStatusInquiryResponse.displayName = 'proto.snap.VirtualAccountStatusInquiryResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.BalanceAmount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.BalanceAmount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.BalanceAmount.displayName = 'proto.snap.BalanceAmount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.HintText = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.HintText, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.HintText.displayName = 'proto.snap.HintText';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.BalanceDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.BalanceDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.BalanceDetails.displayName = 'proto.snap.BalanceDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.BankStatementBalanceDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.BankStatementBalanceDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.BankStatementBalanceDetail.displayName = 'proto.snap.BankStatementBalanceDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.BankStatementBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.BankStatementBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.BankStatementBalance.displayName = 'proto.snap.BankStatementBalance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.BankTransactionEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.BankTransactionEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.BankTransactionEntry.displayName = 'proto.snap.BankTransactionEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.snap.BankStatementDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.snap.BankStatementDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.snap.BankStatementDetail.displayName = 'proto.snap.BankStatementDetail';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.RPCResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.RPCResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.RPCResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.RPCResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.RPCResponse}
 */
proto.snap.RPCResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.RPCResponse;
  return proto.snap.RPCResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.RPCResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.RPCResponse}
 */
proto.snap.RPCResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResponse(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.RPCResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.RPCResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.RPCResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.RPCResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 response = 1;
 * @return {number}
 */
proto.snap.RPCResponse.prototype.getResponse = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.snap.RPCResponse} returns this
 */
proto.snap.RPCResponse.prototype.setResponse = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.snap.RPCResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.RPCResponse} returns this
 */
proto.snap.RPCResponse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.Empty}
 */
proto.snap.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.Empty;
  return proto.snap.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.Empty}
 */
proto.snap.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.AddVirtualAccountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.AddVirtualAccountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.AddVirtualAccountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.AddVirtualAccountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    idtransaction: jspb.Message.getFieldWithDefault(msg, 1, 0),
    transactionidentifier: jspb.Message.getFieldWithDefault(msg, 2, ""),
    idbank: jspb.Message.getFieldWithDefault(msg, 3, 0),
    customerno: jspb.Message.getFieldWithDefault(msg, 4, ""),
    accountname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    totalamount: jspb.Message.getFieldWithDefault(msg, 6, ""),
    feeamount: jspb.Message.getFieldWithDefault(msg, 7, ""),
    expiredate: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.AddVirtualAccountRequest}
 */
proto.snap.AddVirtualAccountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.AddVirtualAccountRequest;
  return proto.snap.AddVirtualAccountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.AddVirtualAccountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.AddVirtualAccountRequest}
 */
proto.snap.AddVirtualAccountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdtransaction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionidentifier(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIdbank(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomerno(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalamount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeeamount(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpiredate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.AddVirtualAccountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.AddVirtualAccountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.AddVirtualAccountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.AddVirtualAccountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdtransaction();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTransactionidentifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIdbank();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getCustomerno();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAccountname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTotalamount();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFeeamount();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getExpiredate();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional int64 idTransaction = 1;
 * @return {number}
 */
proto.snap.AddVirtualAccountRequest.prototype.getIdtransaction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.snap.AddVirtualAccountRequest} returns this
 */
proto.snap.AddVirtualAccountRequest.prototype.setIdtransaction = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string transactionIdentifier = 2;
 * @return {string}
 */
proto.snap.AddVirtualAccountRequest.prototype.getTransactionidentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.AddVirtualAccountRequest} returns this
 */
proto.snap.AddVirtualAccountRequest.prototype.setTransactionidentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 idBank = 3;
 * @return {number}
 */
proto.snap.AddVirtualAccountRequest.prototype.getIdbank = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.snap.AddVirtualAccountRequest} returns this
 */
proto.snap.AddVirtualAccountRequest.prototype.setIdbank = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string customerNo = 4;
 * @return {string}
 */
proto.snap.AddVirtualAccountRequest.prototype.getCustomerno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.AddVirtualAccountRequest} returns this
 */
proto.snap.AddVirtualAccountRequest.prototype.setCustomerno = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string accountName = 5;
 * @return {string}
 */
proto.snap.AddVirtualAccountRequest.prototype.getAccountname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.AddVirtualAccountRequest} returns this
 */
proto.snap.AddVirtualAccountRequest.prototype.setAccountname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string totalAmount = 6;
 * @return {string}
 */
proto.snap.AddVirtualAccountRequest.prototype.getTotalamount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.AddVirtualAccountRequest} returns this
 */
proto.snap.AddVirtualAccountRequest.prototype.setTotalamount = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string feeAmount = 7;
 * @return {string}
 */
proto.snap.AddVirtualAccountRequest.prototype.getFeeamount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.AddVirtualAccountRequest} returns this
 */
proto.snap.AddVirtualAccountRequest.prototype.setFeeamount = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string expireDate = 8;
 * @return {string}
 */
proto.snap.AddVirtualAccountRequest.prototype.getExpiredate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.AddVirtualAccountRequest} returns this
 */
proto.snap.AddVirtualAccountRequest.prototype.setExpiredate = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.AddVirtualAccountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.AddVirtualAccountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.AddVirtualAccountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.AddVirtualAccountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.snap.RPCResponse.toObject(includeInstance, f),
    vanum: jspb.Message.getFieldWithDefault(msg, 2, ""),
    expiredate: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.AddVirtualAccountResponse}
 */
proto.snap.AddVirtualAccountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.AddVirtualAccountResponse;
  return proto.snap.AddVirtualAccountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.AddVirtualAccountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.AddVirtualAccountResponse}
 */
proto.snap.AddVirtualAccountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snap.RPCResponse;
      reader.readMessage(value,proto.snap.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVanum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpiredate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.AddVirtualAccountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.AddVirtualAccountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.AddVirtualAccountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.AddVirtualAccountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snap.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getVanum();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExpiredate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional RPCResponse response = 1;
 * @return {?proto.snap.RPCResponse}
 */
proto.snap.AddVirtualAccountResponse.prototype.getResponse = function() {
  return /** @type{?proto.snap.RPCResponse} */ (
    jspb.Message.getWrapperField(this, proto.snap.RPCResponse, 1));
};


/**
 * @param {?proto.snap.RPCResponse|undefined} value
 * @return {!proto.snap.AddVirtualAccountResponse} returns this
*/
proto.snap.AddVirtualAccountResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.AddVirtualAccountResponse} returns this
 */
proto.snap.AddVirtualAccountResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.AddVirtualAccountResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string vaNum = 2;
 * @return {string}
 */
proto.snap.AddVirtualAccountResponse.prototype.getVanum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.AddVirtualAccountResponse} returns this
 */
proto.snap.AddVirtualAccountResponse.prototype.setVanum = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string expireDate = 3;
 * @return {string}
 */
proto.snap.AddVirtualAccountResponse.prototype.getExpiredate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.AddVirtualAccountResponse} returns this
 */
proto.snap.AddVirtualAccountResponse.prototype.setExpiredate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.BalanceInquiryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.BalanceInquiryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.BalanceInquiryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BalanceInquiryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.snap.RPCResponse.toObject(includeInstance, f),
    accountnumber: jspb.Message.getFieldWithDefault(msg, 2, ""),
    accountname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    balance: (f = msg.getBalance()) && proto.snap.BalanceAmount.toObject(includeInstance, f),
    balancedetails: (f = msg.getBalancedetails()) && proto.snap.BalanceDetails.toObject(includeInstance, f),
    jsonstr: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.BalanceInquiryResponse}
 */
proto.snap.BalanceInquiryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.BalanceInquiryResponse;
  return proto.snap.BalanceInquiryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.BalanceInquiryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.BalanceInquiryResponse}
 */
proto.snap.BalanceInquiryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snap.RPCResponse;
      reader.readMessage(value,proto.snap.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountnumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountname(value);
      break;
    case 4:
      var value = new proto.snap.BalanceAmount;
      reader.readMessage(value,proto.snap.BalanceAmount.deserializeBinaryFromReader);
      msg.setBalance(value);
      break;
    case 5:
      var value = new proto.snap.BalanceDetails;
      reader.readMessage(value,proto.snap.BalanceDetails.deserializeBinaryFromReader);
      msg.setBalancedetails(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonstr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.BalanceInquiryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.BalanceInquiryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.BalanceInquiryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BalanceInquiryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snap.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getAccountnumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccountname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.snap.BalanceAmount.serializeBinaryToWriter
    );
  }
  f = message.getBalancedetails();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.snap.BalanceDetails.serializeBinaryToWriter
    );
  }
  f = message.getJsonstr();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional RPCResponse response = 1;
 * @return {?proto.snap.RPCResponse}
 */
proto.snap.BalanceInquiryResponse.prototype.getResponse = function() {
  return /** @type{?proto.snap.RPCResponse} */ (
    jspb.Message.getWrapperField(this, proto.snap.RPCResponse, 1));
};


/**
 * @param {?proto.snap.RPCResponse|undefined} value
 * @return {!proto.snap.BalanceInquiryResponse} returns this
*/
proto.snap.BalanceInquiryResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BalanceInquiryResponse} returns this
 */
proto.snap.BalanceInquiryResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BalanceInquiryResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string accountNumber = 2;
 * @return {string}
 */
proto.snap.BalanceInquiryResponse.prototype.getAccountnumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BalanceInquiryResponse} returns this
 */
proto.snap.BalanceInquiryResponse.prototype.setAccountnumber = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string accountName = 3;
 * @return {string}
 */
proto.snap.BalanceInquiryResponse.prototype.getAccountname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BalanceInquiryResponse} returns this
 */
proto.snap.BalanceInquiryResponse.prototype.setAccountname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional BalanceAmount balance = 4;
 * @return {?proto.snap.BalanceAmount}
 */
proto.snap.BalanceInquiryResponse.prototype.getBalance = function() {
  return /** @type{?proto.snap.BalanceAmount} */ (
    jspb.Message.getWrapperField(this, proto.snap.BalanceAmount, 4));
};


/**
 * @param {?proto.snap.BalanceAmount|undefined} value
 * @return {!proto.snap.BalanceInquiryResponse} returns this
*/
proto.snap.BalanceInquiryResponse.prototype.setBalance = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BalanceInquiryResponse} returns this
 */
proto.snap.BalanceInquiryResponse.prototype.clearBalance = function() {
  return this.setBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BalanceInquiryResponse.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BalanceDetails balanceDetails = 5;
 * @return {?proto.snap.BalanceDetails}
 */
proto.snap.BalanceInquiryResponse.prototype.getBalancedetails = function() {
  return /** @type{?proto.snap.BalanceDetails} */ (
    jspb.Message.getWrapperField(this, proto.snap.BalanceDetails, 5));
};


/**
 * @param {?proto.snap.BalanceDetails|undefined} value
 * @return {!proto.snap.BalanceInquiryResponse} returns this
*/
proto.snap.BalanceInquiryResponse.prototype.setBalancedetails = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BalanceInquiryResponse} returns this
 */
proto.snap.BalanceInquiryResponse.prototype.clearBalancedetails = function() {
  return this.setBalancedetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BalanceInquiryResponse.prototype.hasBalancedetails = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string jsonStr = 6;
 * @return {string}
 */
proto.snap.BalanceInquiryResponse.prototype.getJsonstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BalanceInquiryResponse} returns this
 */
proto.snap.BalanceInquiryResponse.prototype.setJsonstr = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.BankStatementRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.BankStatementRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.BankStatementRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankStatementRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromdatetime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    todatetime: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.BankStatementRequest}
 */
proto.snap.BankStatementRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.BankStatementRequest;
  return proto.snap.BankStatementRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.BankStatementRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.BankStatementRequest}
 */
proto.snap.BankStatementRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromdatetime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTodatetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.BankStatementRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.BankStatementRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.BankStatementRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankStatementRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromdatetime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTodatetime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string fromDateTime = 1;
 * @return {string}
 */
proto.snap.BankStatementRequest.prototype.getFromdatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankStatementRequest} returns this
 */
proto.snap.BankStatementRequest.prototype.setFromdatetime = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string toDateTime = 2;
 * @return {string}
 */
proto.snap.BankStatementRequest.prototype.getTodatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankStatementRequest} returns this
 */
proto.snap.BankStatementRequest.prototype.setTodatetime = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.snap.BankStatementResponse.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.BankStatementResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.BankStatementResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.BankStatementResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankStatementResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.snap.RPCResponse.toObject(includeInstance, f),
    balance: (f = msg.getBalance()) && proto.snap.BankStatementBalance.toObject(includeInstance, f),
    creditentries: (f = msg.getCreditentries()) && proto.snap.BankTransactionEntry.toObject(includeInstance, f),
    debitentries: (f = msg.getDebitentries()) && proto.snap.BankTransactionEntry.toObject(includeInstance, f),
    statementsList: jspb.Message.toObjectList(msg.getStatementsList(),
    proto.snap.BankStatementDetail.toObject, includeInstance),
    jsonstr: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.BankStatementResponse}
 */
proto.snap.BankStatementResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.BankStatementResponse;
  return proto.snap.BankStatementResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.BankStatementResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.BankStatementResponse}
 */
proto.snap.BankStatementResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snap.RPCResponse;
      reader.readMessage(value,proto.snap.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = new proto.snap.BankStatementBalance;
      reader.readMessage(value,proto.snap.BankStatementBalance.deserializeBinaryFromReader);
      msg.setBalance(value);
      break;
    case 3:
      var value = new proto.snap.BankTransactionEntry;
      reader.readMessage(value,proto.snap.BankTransactionEntry.deserializeBinaryFromReader);
      msg.setCreditentries(value);
      break;
    case 4:
      var value = new proto.snap.BankTransactionEntry;
      reader.readMessage(value,proto.snap.BankTransactionEntry.deserializeBinaryFromReader);
      msg.setDebitentries(value);
      break;
    case 5:
      var value = new proto.snap.BankStatementDetail;
      reader.readMessage(value,proto.snap.BankStatementDetail.deserializeBinaryFromReader);
      msg.addStatements(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonstr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.BankStatementResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.BankStatementResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.BankStatementResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankStatementResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snap.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.snap.BankStatementBalance.serializeBinaryToWriter
    );
  }
  f = message.getCreditentries();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.snap.BankTransactionEntry.serializeBinaryToWriter
    );
  }
  f = message.getDebitentries();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.snap.BankTransactionEntry.serializeBinaryToWriter
    );
  }
  f = message.getStatementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.snap.BankStatementDetail.serializeBinaryToWriter
    );
  }
  f = message.getJsonstr();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional RPCResponse response = 1;
 * @return {?proto.snap.RPCResponse}
 */
proto.snap.BankStatementResponse.prototype.getResponse = function() {
  return /** @type{?proto.snap.RPCResponse} */ (
    jspb.Message.getWrapperField(this, proto.snap.RPCResponse, 1));
};


/**
 * @param {?proto.snap.RPCResponse|undefined} value
 * @return {!proto.snap.BankStatementResponse} returns this
*/
proto.snap.BankStatementResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BankStatementResponse} returns this
 */
proto.snap.BankStatementResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BankStatementResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BankStatementBalance balance = 2;
 * @return {?proto.snap.BankStatementBalance}
 */
proto.snap.BankStatementResponse.prototype.getBalance = function() {
  return /** @type{?proto.snap.BankStatementBalance} */ (
    jspb.Message.getWrapperField(this, proto.snap.BankStatementBalance, 2));
};


/**
 * @param {?proto.snap.BankStatementBalance|undefined} value
 * @return {!proto.snap.BankStatementResponse} returns this
*/
proto.snap.BankStatementResponse.prototype.setBalance = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BankStatementResponse} returns this
 */
proto.snap.BankStatementResponse.prototype.clearBalance = function() {
  return this.setBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BankStatementResponse.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BankTransactionEntry creditEntries = 3;
 * @return {?proto.snap.BankTransactionEntry}
 */
proto.snap.BankStatementResponse.prototype.getCreditentries = function() {
  return /** @type{?proto.snap.BankTransactionEntry} */ (
    jspb.Message.getWrapperField(this, proto.snap.BankTransactionEntry, 3));
};


/**
 * @param {?proto.snap.BankTransactionEntry|undefined} value
 * @return {!proto.snap.BankStatementResponse} returns this
*/
proto.snap.BankStatementResponse.prototype.setCreditentries = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BankStatementResponse} returns this
 */
proto.snap.BankStatementResponse.prototype.clearCreditentries = function() {
  return this.setCreditentries(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BankStatementResponse.prototype.hasCreditentries = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BankTransactionEntry debitEntries = 4;
 * @return {?proto.snap.BankTransactionEntry}
 */
proto.snap.BankStatementResponse.prototype.getDebitentries = function() {
  return /** @type{?proto.snap.BankTransactionEntry} */ (
    jspb.Message.getWrapperField(this, proto.snap.BankTransactionEntry, 4));
};


/**
 * @param {?proto.snap.BankTransactionEntry|undefined} value
 * @return {!proto.snap.BankStatementResponse} returns this
*/
proto.snap.BankStatementResponse.prototype.setDebitentries = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BankStatementResponse} returns this
 */
proto.snap.BankStatementResponse.prototype.clearDebitentries = function() {
  return this.setDebitentries(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BankStatementResponse.prototype.hasDebitentries = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated BankStatementDetail statements = 5;
 * @return {!Array<!proto.snap.BankStatementDetail>}
 */
proto.snap.BankStatementResponse.prototype.getStatementsList = function() {
  return /** @type{!Array<!proto.snap.BankStatementDetail>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.snap.BankStatementDetail, 5));
};


/**
 * @param {!Array<!proto.snap.BankStatementDetail>} value
 * @return {!proto.snap.BankStatementResponse} returns this
*/
proto.snap.BankStatementResponse.prototype.setStatementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.snap.BankStatementDetail=} opt_value
 * @param {number=} opt_index
 * @return {!proto.snap.BankStatementDetail}
 */
proto.snap.BankStatementResponse.prototype.addStatements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.snap.BankStatementDetail, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.snap.BankStatementResponse} returns this
 */
proto.snap.BankStatementResponse.prototype.clearStatementsList = function() {
  return this.setStatementsList([]);
};


/**
 * optional string jsonStr = 6;
 * @return {string}
 */
proto.snap.BankStatementResponse.prototype.getJsonstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankStatementResponse} returns this
 */
proto.snap.BankStatementResponse.prototype.setJsonstr = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.TransferIntraBankRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.TransferIntraBankRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.TransferIntraBankRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.TransferIntraBankRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && proto.snap.BalanceAmount.toObject(includeInstance, f),
    beneficiaryaccountno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    beneficiaryemail: jspb.Message.getFieldWithDefault(msg, 3, ""),
    transactiondate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    beneficiaryaccountname: jspb.Message.getFieldWithDefault(msg, 5, ""),
    transactionremark: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.TransferIntraBankRequest}
 */
proto.snap.TransferIntraBankRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.TransferIntraBankRequest;
  return proto.snap.TransferIntraBankRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.TransferIntraBankRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.TransferIntraBankRequest}
 */
proto.snap.TransferIntraBankRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snap.BalanceAmount;
      reader.readMessage(value,proto.snap.BalanceAmount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryaccountno(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryemail(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactiondate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryaccountname(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionremark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.TransferIntraBankRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.TransferIntraBankRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.TransferIntraBankRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.TransferIntraBankRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snap.BalanceAmount.serializeBinaryToWriter
    );
  }
  f = message.getBeneficiaryaccountno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBeneficiaryemail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTransactiondate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBeneficiaryaccountname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTransactionremark();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional BalanceAmount amount = 1;
 * @return {?proto.snap.BalanceAmount}
 */
proto.snap.TransferIntraBankRequest.prototype.getAmount = function() {
  return /** @type{?proto.snap.BalanceAmount} */ (
    jspb.Message.getWrapperField(this, proto.snap.BalanceAmount, 1));
};


/**
 * @param {?proto.snap.BalanceAmount|undefined} value
 * @return {!proto.snap.TransferIntraBankRequest} returns this
*/
proto.snap.TransferIntraBankRequest.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.TransferIntraBankRequest} returns this
 */
proto.snap.TransferIntraBankRequest.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.TransferIntraBankRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string beneficiaryAccountNo = 2;
 * @return {string}
 */
proto.snap.TransferIntraBankRequest.prototype.getBeneficiaryaccountno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.TransferIntraBankRequest} returns this
 */
proto.snap.TransferIntraBankRequest.prototype.setBeneficiaryaccountno = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string beneficiaryEmail = 3;
 * @return {string}
 */
proto.snap.TransferIntraBankRequest.prototype.getBeneficiaryemail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.TransferIntraBankRequest} returns this
 */
proto.snap.TransferIntraBankRequest.prototype.setBeneficiaryemail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string transactionDate = 4;
 * @return {string}
 */
proto.snap.TransferIntraBankRequest.prototype.getTransactiondate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.TransferIntraBankRequest} returns this
 */
proto.snap.TransferIntraBankRequest.prototype.setTransactiondate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string beneficiaryAccountName = 5;
 * @return {string}
 */
proto.snap.TransferIntraBankRequest.prototype.getBeneficiaryaccountname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.TransferIntraBankRequest} returns this
 */
proto.snap.TransferIntraBankRequest.prototype.setBeneficiaryaccountname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string transactionRemark = 6;
 * @return {string}
 */
proto.snap.TransferIntraBankRequest.prototype.getTransactionremark = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.TransferIntraBankRequest} returns this
 */
proto.snap.TransferIntraBankRequest.prototype.setTransactionremark = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.TransferInterBankRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.TransferInterBankRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.TransferInterBankRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.TransferInterBankRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && proto.snap.BalanceAmount.toObject(includeInstance, f),
    beneficiaryaccountno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    beneficiaryaccountname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    beneficiarybankcode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    beneficiaryemail: jspb.Message.getFieldWithDefault(msg, 5, ""),
    transactiondate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    transactionremark: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.TransferInterBankRequest}
 */
proto.snap.TransferInterBankRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.TransferInterBankRequest;
  return proto.snap.TransferInterBankRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.TransferInterBankRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.TransferInterBankRequest}
 */
proto.snap.TransferInterBankRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snap.BalanceAmount;
      reader.readMessage(value,proto.snap.BalanceAmount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryaccountno(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryaccountname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiarybankcode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryemail(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactiondate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionremark(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.TransferInterBankRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.TransferInterBankRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.TransferInterBankRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.TransferInterBankRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snap.BalanceAmount.serializeBinaryToWriter
    );
  }
  f = message.getBeneficiaryaccountno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBeneficiaryaccountname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBeneficiarybankcode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBeneficiaryemail();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTransactiondate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTransactionremark();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional BalanceAmount amount = 1;
 * @return {?proto.snap.BalanceAmount}
 */
proto.snap.TransferInterBankRequest.prototype.getAmount = function() {
  return /** @type{?proto.snap.BalanceAmount} */ (
    jspb.Message.getWrapperField(this, proto.snap.BalanceAmount, 1));
};


/**
 * @param {?proto.snap.BalanceAmount|undefined} value
 * @return {!proto.snap.TransferInterBankRequest} returns this
*/
proto.snap.TransferInterBankRequest.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.TransferInterBankRequest} returns this
 */
proto.snap.TransferInterBankRequest.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.TransferInterBankRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string beneficiaryAccountNo = 2;
 * @return {string}
 */
proto.snap.TransferInterBankRequest.prototype.getBeneficiaryaccountno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.TransferInterBankRequest} returns this
 */
proto.snap.TransferInterBankRequest.prototype.setBeneficiaryaccountno = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string beneficiaryAccountName = 3;
 * @return {string}
 */
proto.snap.TransferInterBankRequest.prototype.getBeneficiaryaccountname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.TransferInterBankRequest} returns this
 */
proto.snap.TransferInterBankRequest.prototype.setBeneficiaryaccountname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string beneficiaryBankCode = 4;
 * @return {string}
 */
proto.snap.TransferInterBankRequest.prototype.getBeneficiarybankcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.TransferInterBankRequest} returns this
 */
proto.snap.TransferInterBankRequest.prototype.setBeneficiarybankcode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string beneficiaryEmail = 5;
 * @return {string}
 */
proto.snap.TransferInterBankRequest.prototype.getBeneficiaryemail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.TransferInterBankRequest} returns this
 */
proto.snap.TransferInterBankRequest.prototype.setBeneficiaryemail = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string transactionDate = 6;
 * @return {string}
 */
proto.snap.TransferInterBankRequest.prototype.getTransactiondate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.TransferInterBankRequest} returns this
 */
proto.snap.TransferInterBankRequest.prototype.setTransactiondate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string transactionRemark = 7;
 * @return {string}
 */
proto.snap.TransferInterBankRequest.prototype.getTransactionremark = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.TransferInterBankRequest} returns this
 */
proto.snap.TransferInterBankRequest.prototype.setTransactionremark = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.BankTransferResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.BankTransferResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.BankTransferResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankTransferResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.snap.RPCResponse.toObject(includeInstance, f),
    transactionreferencestr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    externalid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    servicecode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    transactiondate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    jsonstr: jspb.Message.getFieldWithDefault(msg, 6, ""),
    transactionstatuscode: jspb.Message.getFieldWithDefault(msg, 7, ""),
    transactionstatusdesc: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.BankTransferResponse}
 */
proto.snap.BankTransferResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.BankTransferResponse;
  return proto.snap.BankTransferResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.BankTransferResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.BankTransferResponse}
 */
proto.snap.BankTransferResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snap.RPCResponse;
      reader.readMessage(value,proto.snap.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionreferencestr(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExternalid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setServicecode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactiondate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonstr(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionstatuscode(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionstatusdesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.BankTransferResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.BankTransferResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.BankTransferResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankTransferResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snap.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getTransactionreferencestr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExternalid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getServicecode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTransactiondate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getJsonstr();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTransactionstatuscode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTransactionstatusdesc();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional RPCResponse response = 1;
 * @return {?proto.snap.RPCResponse}
 */
proto.snap.BankTransferResponse.prototype.getResponse = function() {
  return /** @type{?proto.snap.RPCResponse} */ (
    jspb.Message.getWrapperField(this, proto.snap.RPCResponse, 1));
};


/**
 * @param {?proto.snap.RPCResponse|undefined} value
 * @return {!proto.snap.BankTransferResponse} returns this
*/
proto.snap.BankTransferResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BankTransferResponse} returns this
 */
proto.snap.BankTransferResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BankTransferResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string transactionReferenceStr = 2;
 * @return {string}
 */
proto.snap.BankTransferResponse.prototype.getTransactionreferencestr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankTransferResponse} returns this
 */
proto.snap.BankTransferResponse.prototype.setTransactionreferencestr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string externalId = 3;
 * @return {string}
 */
proto.snap.BankTransferResponse.prototype.getExternalid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankTransferResponse} returns this
 */
proto.snap.BankTransferResponse.prototype.setExternalid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string serviceCode = 4;
 * @return {string}
 */
proto.snap.BankTransferResponse.prototype.getServicecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankTransferResponse} returns this
 */
proto.snap.BankTransferResponse.prototype.setServicecode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string transactionDate = 5;
 * @return {string}
 */
proto.snap.BankTransferResponse.prototype.getTransactiondate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankTransferResponse} returns this
 */
proto.snap.BankTransferResponse.prototype.setTransactiondate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string jsonStr = 6;
 * @return {string}
 */
proto.snap.BankTransferResponse.prototype.getJsonstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankTransferResponse} returns this
 */
proto.snap.BankTransferResponse.prototype.setJsonstr = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string transactionStatusCode = 7;
 * @return {string}
 */
proto.snap.BankTransferResponse.prototype.getTransactionstatuscode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankTransferResponse} returns this
 */
proto.snap.BankTransferResponse.prototype.setTransactionstatuscode = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string transactionStatusDesc = 8;
 * @return {string}
 */
proto.snap.BankTransferResponse.prototype.getTransactionstatusdesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankTransferResponse} returns this
 */
proto.snap.BankTransferResponse.prototype.setTransactionstatusdesc = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.ExternalAccountInquiryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.ExternalAccountInquiryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.ExternalAccountInquiryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.ExternalAccountInquiryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    beneficiarybankcode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    beneficiaryaccountno: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inquiryservice: jspb.Message.getFieldWithDefault(msg, 3, ""),
    purposecode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    amount: (f = msg.getAmount()) && proto.snap.BalanceAmount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.ExternalAccountInquiryRequest}
 */
proto.snap.ExternalAccountInquiryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.ExternalAccountInquiryRequest;
  return proto.snap.ExternalAccountInquiryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.ExternalAccountInquiryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.ExternalAccountInquiryRequest}
 */
proto.snap.ExternalAccountInquiryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiarybankcode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryaccountno(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInquiryservice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPurposecode(value);
      break;
    case 5:
      var value = new proto.snap.BalanceAmount;
      reader.readMessage(value,proto.snap.BalanceAmount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.ExternalAccountInquiryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.ExternalAccountInquiryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.ExternalAccountInquiryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.ExternalAccountInquiryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeneficiarybankcode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBeneficiaryaccountno();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInquiryservice();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPurposecode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.snap.BalanceAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional string beneficiaryBankCode = 1;
 * @return {string}
 */
proto.snap.ExternalAccountInquiryRequest.prototype.getBeneficiarybankcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.ExternalAccountInquiryRequest} returns this
 */
proto.snap.ExternalAccountInquiryRequest.prototype.setBeneficiarybankcode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string beneficiaryAccountNo = 2;
 * @return {string}
 */
proto.snap.ExternalAccountInquiryRequest.prototype.getBeneficiaryaccountno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.ExternalAccountInquiryRequest} returns this
 */
proto.snap.ExternalAccountInquiryRequest.prototype.setBeneficiaryaccountno = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string inquiryService = 3;
 * @return {string}
 */
proto.snap.ExternalAccountInquiryRequest.prototype.getInquiryservice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.ExternalAccountInquiryRequest} returns this
 */
proto.snap.ExternalAccountInquiryRequest.prototype.setInquiryservice = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string purposeCode = 4;
 * @return {string}
 */
proto.snap.ExternalAccountInquiryRequest.prototype.getPurposecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.ExternalAccountInquiryRequest} returns this
 */
proto.snap.ExternalAccountInquiryRequest.prototype.setPurposecode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional BalanceAmount amount = 5;
 * @return {?proto.snap.BalanceAmount}
 */
proto.snap.ExternalAccountInquiryRequest.prototype.getAmount = function() {
  return /** @type{?proto.snap.BalanceAmount} */ (
    jspb.Message.getWrapperField(this, proto.snap.BalanceAmount, 5));
};


/**
 * @param {?proto.snap.BalanceAmount|undefined} value
 * @return {!proto.snap.ExternalAccountInquiryRequest} returns this
*/
proto.snap.ExternalAccountInquiryRequest.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.ExternalAccountInquiryRequest} returns this
 */
proto.snap.ExternalAccountInquiryRequest.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.ExternalAccountInquiryRequest.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.ExternalAccountInquiryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.ExternalAccountInquiryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.ExternalAccountInquiryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.ExternalAccountInquiryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.snap.RPCResponse.toObject(includeInstance, f),
    beneficiaryaccountname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    beneficiaryaccountno: jspb.Message.getFieldWithDefault(msg, 3, ""),
    beneficiarybankcode: jspb.Message.getFieldWithDefault(msg, 4, ""),
    jsonstr: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.ExternalAccountInquiryResponse}
 */
proto.snap.ExternalAccountInquiryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.ExternalAccountInquiryResponse;
  return proto.snap.ExternalAccountInquiryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.ExternalAccountInquiryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.ExternalAccountInquiryResponse}
 */
proto.snap.ExternalAccountInquiryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snap.RPCResponse;
      reader.readMessage(value,proto.snap.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryaccountname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryaccountno(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiarybankcode(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonstr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.ExternalAccountInquiryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.ExternalAccountInquiryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.ExternalAccountInquiryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.ExternalAccountInquiryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snap.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getBeneficiaryaccountname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBeneficiaryaccountno();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBeneficiarybankcode();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getJsonstr();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional RPCResponse response = 1;
 * @return {?proto.snap.RPCResponse}
 */
proto.snap.ExternalAccountInquiryResponse.prototype.getResponse = function() {
  return /** @type{?proto.snap.RPCResponse} */ (
    jspb.Message.getWrapperField(this, proto.snap.RPCResponse, 1));
};


/**
 * @param {?proto.snap.RPCResponse|undefined} value
 * @return {!proto.snap.ExternalAccountInquiryResponse} returns this
*/
proto.snap.ExternalAccountInquiryResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.ExternalAccountInquiryResponse} returns this
 */
proto.snap.ExternalAccountInquiryResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.ExternalAccountInquiryResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string beneficiaryAccountName = 2;
 * @return {string}
 */
proto.snap.ExternalAccountInquiryResponse.prototype.getBeneficiaryaccountname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.ExternalAccountInquiryResponse} returns this
 */
proto.snap.ExternalAccountInquiryResponse.prototype.setBeneficiaryaccountname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string beneficiaryAccountNo = 3;
 * @return {string}
 */
proto.snap.ExternalAccountInquiryResponse.prototype.getBeneficiaryaccountno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.ExternalAccountInquiryResponse} returns this
 */
proto.snap.ExternalAccountInquiryResponse.prototype.setBeneficiaryaccountno = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string beneficiaryBankCode = 4;
 * @return {string}
 */
proto.snap.ExternalAccountInquiryResponse.prototype.getBeneficiarybankcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.ExternalAccountInquiryResponse} returns this
 */
proto.snap.ExternalAccountInquiryResponse.prototype.setBeneficiarybankcode = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string jsonStr = 5;
 * @return {string}
 */
proto.snap.ExternalAccountInquiryResponse.prototype.getJsonstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.ExternalAccountInquiryResponse} returns this
 */
proto.snap.ExternalAccountInquiryResponse.prototype.setJsonstr = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.InternalAccountInquiryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.InternalAccountInquiryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.InternalAccountInquiryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.InternalAccountInquiryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    beneficiaryaccountno: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.InternalAccountInquiryRequest}
 */
proto.snap.InternalAccountInquiryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.InternalAccountInquiryRequest;
  return proto.snap.InternalAccountInquiryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.InternalAccountInquiryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.InternalAccountInquiryRequest}
 */
proto.snap.InternalAccountInquiryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryaccountno(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.InternalAccountInquiryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.InternalAccountInquiryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.InternalAccountInquiryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.InternalAccountInquiryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeneficiaryaccountno();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string beneficiaryAccountNo = 1;
 * @return {string}
 */
proto.snap.InternalAccountInquiryRequest.prototype.getBeneficiaryaccountno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.InternalAccountInquiryRequest} returns this
 */
proto.snap.InternalAccountInquiryRequest.prototype.setBeneficiaryaccountno = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.InternalAccountInquiryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.InternalAccountInquiryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.InternalAccountInquiryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.InternalAccountInquiryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.snap.RPCResponse.toObject(includeInstance, f),
    beneficiaryaccountname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    beneficiaryaccountno: jspb.Message.getFieldWithDefault(msg, 3, ""),
    jsonstr: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.InternalAccountInquiryResponse}
 */
proto.snap.InternalAccountInquiryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.InternalAccountInquiryResponse;
  return proto.snap.InternalAccountInquiryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.InternalAccountInquiryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.InternalAccountInquiryResponse}
 */
proto.snap.InternalAccountInquiryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snap.RPCResponse;
      reader.readMessage(value,proto.snap.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryaccountname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeneficiaryaccountno(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonstr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.InternalAccountInquiryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.InternalAccountInquiryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.InternalAccountInquiryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.InternalAccountInquiryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snap.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getBeneficiaryaccountname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBeneficiaryaccountno();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getJsonstr();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional RPCResponse response = 1;
 * @return {?proto.snap.RPCResponse}
 */
proto.snap.InternalAccountInquiryResponse.prototype.getResponse = function() {
  return /** @type{?proto.snap.RPCResponse} */ (
    jspb.Message.getWrapperField(this, proto.snap.RPCResponse, 1));
};


/**
 * @param {?proto.snap.RPCResponse|undefined} value
 * @return {!proto.snap.InternalAccountInquiryResponse} returns this
*/
proto.snap.InternalAccountInquiryResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.InternalAccountInquiryResponse} returns this
 */
proto.snap.InternalAccountInquiryResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.InternalAccountInquiryResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string beneficiaryAccountName = 2;
 * @return {string}
 */
proto.snap.InternalAccountInquiryResponse.prototype.getBeneficiaryaccountname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.InternalAccountInquiryResponse} returns this
 */
proto.snap.InternalAccountInquiryResponse.prototype.setBeneficiaryaccountname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string beneficiaryAccountNo = 3;
 * @return {string}
 */
proto.snap.InternalAccountInquiryResponse.prototype.getBeneficiaryaccountno = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.InternalAccountInquiryResponse} returns this
 */
proto.snap.InternalAccountInquiryResponse.prototype.setBeneficiaryaccountno = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string jsonStr = 4;
 * @return {string}
 */
proto.snap.InternalAccountInquiryResponse.prototype.getJsonstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.InternalAccountInquiryResponse} returns this
 */
proto.snap.InternalAccountInquiryResponse.prototype.setJsonstr = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.VirtualAccountStatusInquiryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.VirtualAccountStatusInquiryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.VirtualAccountStatusInquiryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.VirtualAccountStatusInquiryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    vanum: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.VirtualAccountStatusInquiryRequest}
 */
proto.snap.VirtualAccountStatusInquiryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.VirtualAccountStatusInquiryRequest;
  return proto.snap.VirtualAccountStatusInquiryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.VirtualAccountStatusInquiryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.VirtualAccountStatusInquiryRequest}
 */
proto.snap.VirtualAccountStatusInquiryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVanum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.VirtualAccountStatusInquiryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.VirtualAccountStatusInquiryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.VirtualAccountStatusInquiryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.VirtualAccountStatusInquiryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVanum();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string vaNum = 1;
 * @return {string}
 */
proto.snap.VirtualAccountStatusInquiryRequest.prototype.getVanum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.VirtualAccountStatusInquiryRequest} returns this
 */
proto.snap.VirtualAccountStatusInquiryRequest.prototype.setVanum = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.VirtualAccountStatusInquiryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.VirtualAccountStatusInquiryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.VirtualAccountStatusInquiryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && proto.snap.RPCResponse.toObject(includeInstance, f),
    vanum: jspb.Message.getFieldWithDefault(msg, 2, ""),
    vastatus: jspb.Message.getFieldWithDefault(msg, 3, ""),
    expiredate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    paiddate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    jsonstr: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.VirtualAccountStatusInquiryResponse}
 */
proto.snap.VirtualAccountStatusInquiryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.VirtualAccountStatusInquiryResponse;
  return proto.snap.VirtualAccountStatusInquiryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.VirtualAccountStatusInquiryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.VirtualAccountStatusInquiryResponse}
 */
proto.snap.VirtualAccountStatusInquiryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snap.RPCResponse;
      reader.readMessage(value,proto.snap.RPCResponse.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVanum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVastatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpiredate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaiddate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setJsonstr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.VirtualAccountStatusInquiryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.VirtualAccountStatusInquiryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.VirtualAccountStatusInquiryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snap.RPCResponse.serializeBinaryToWriter
    );
  }
  f = message.getVanum();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVastatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExpiredate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPaiddate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getJsonstr();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional RPCResponse response = 1;
 * @return {?proto.snap.RPCResponse}
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.getResponse = function() {
  return /** @type{?proto.snap.RPCResponse} */ (
    jspb.Message.getWrapperField(this, proto.snap.RPCResponse, 1));
};


/**
 * @param {?proto.snap.RPCResponse|undefined} value
 * @return {!proto.snap.VirtualAccountStatusInquiryResponse} returns this
*/
proto.snap.VirtualAccountStatusInquiryResponse.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.VirtualAccountStatusInquiryResponse} returns this
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string vaNum = 2;
 * @return {string}
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.getVanum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.VirtualAccountStatusInquiryResponse} returns this
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.setVanum = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string vaStatus = 3;
 * @return {string}
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.getVastatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.VirtualAccountStatusInquiryResponse} returns this
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.setVastatus = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string expireDate = 4;
 * @return {string}
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.getExpiredate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.VirtualAccountStatusInquiryResponse} returns this
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.setExpiredate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string paidDate = 5;
 * @return {string}
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.getPaiddate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.VirtualAccountStatusInquiryResponse} returns this
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.setPaiddate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string jsonStr = 6;
 * @return {string}
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.getJsonstr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.VirtualAccountStatusInquiryResponse} returns this
 */
proto.snap.VirtualAccountStatusInquiryResponse.prototype.setJsonstr = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.BalanceAmount.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.BalanceAmount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.BalanceAmount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BalanceAmount.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    currency: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hinttext: (f = msg.getHinttext()) && proto.snap.HintText.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.BalanceAmount}
 */
proto.snap.BalanceAmount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.BalanceAmount;
  return proto.snap.BalanceAmount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.BalanceAmount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.BalanceAmount}
 */
proto.snap.BalanceAmount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 3:
      var value = new proto.snap.HintText;
      reader.readMessage(value,proto.snap.HintText.deserializeBinaryFromReader);
      msg.setHinttext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.BalanceAmount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.BalanceAmount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.BalanceAmount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BalanceAmount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHinttext();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.snap.HintText.serializeBinaryToWriter
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.snap.BalanceAmount.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BalanceAmount} returns this
 */
proto.snap.BalanceAmount.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string currency = 2;
 * @return {string}
 */
proto.snap.BalanceAmount.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BalanceAmount} returns this
 */
proto.snap.BalanceAmount.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional HintText hintText = 3;
 * @return {?proto.snap.HintText}
 */
proto.snap.BalanceAmount.prototype.getHinttext = function() {
  return /** @type{?proto.snap.HintText} */ (
    jspb.Message.getWrapperField(this, proto.snap.HintText, 3));
};


/**
 * @param {?proto.snap.HintText|undefined} value
 * @return {!proto.snap.BalanceAmount} returns this
*/
proto.snap.BalanceAmount.prototype.setHinttext = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BalanceAmount} returns this
 */
proto.snap.BalanceAmount.prototype.clearHinttext = function() {
  return this.setHinttext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BalanceAmount.prototype.hasHinttext = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.HintText.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.HintText.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.HintText} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.HintText.toObject = function(includeInstance, msg) {
  var f, obj = {
    en: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.HintText}
 */
proto.snap.HintText.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.HintText;
  return proto.snap.HintText.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.HintText} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.HintText}
 */
proto.snap.HintText.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEn(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.HintText.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.HintText.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.HintText} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.HintText.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEn();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string en = 1;
 * @return {string}
 */
proto.snap.HintText.prototype.getEn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.HintText} returns this
 */
proto.snap.HintText.prototype.setEn = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.snap.HintText.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.HintText} returns this
 */
proto.snap.HintText.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.BalanceDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.BalanceDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.BalanceDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BalanceDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    availablebalance: (f = msg.getAvailablebalance()) && proto.snap.BalanceAmount.toObject(includeInstance, f),
    floatbalance: (f = msg.getFloatbalance()) && proto.snap.BalanceAmount.toObject(includeInstance, f),
    holdbalance: (f = msg.getHoldbalance()) && proto.snap.BalanceAmount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.BalanceDetails}
 */
proto.snap.BalanceDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.BalanceDetails;
  return proto.snap.BalanceDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.BalanceDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.BalanceDetails}
 */
proto.snap.BalanceDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snap.BalanceAmount;
      reader.readMessage(value,proto.snap.BalanceAmount.deserializeBinaryFromReader);
      msg.setAvailablebalance(value);
      break;
    case 2:
      var value = new proto.snap.BalanceAmount;
      reader.readMessage(value,proto.snap.BalanceAmount.deserializeBinaryFromReader);
      msg.setFloatbalance(value);
      break;
    case 3:
      var value = new proto.snap.BalanceAmount;
      reader.readMessage(value,proto.snap.BalanceAmount.deserializeBinaryFromReader);
      msg.setHoldbalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.BalanceDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.BalanceDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.BalanceDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BalanceDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAvailablebalance();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snap.BalanceAmount.serializeBinaryToWriter
    );
  }
  f = message.getFloatbalance();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.snap.BalanceAmount.serializeBinaryToWriter
    );
  }
  f = message.getHoldbalance();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.snap.BalanceAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional BalanceAmount availableBalance = 1;
 * @return {?proto.snap.BalanceAmount}
 */
proto.snap.BalanceDetails.prototype.getAvailablebalance = function() {
  return /** @type{?proto.snap.BalanceAmount} */ (
    jspb.Message.getWrapperField(this, proto.snap.BalanceAmount, 1));
};


/**
 * @param {?proto.snap.BalanceAmount|undefined} value
 * @return {!proto.snap.BalanceDetails} returns this
*/
proto.snap.BalanceDetails.prototype.setAvailablebalance = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BalanceDetails} returns this
 */
proto.snap.BalanceDetails.prototype.clearAvailablebalance = function() {
  return this.setAvailablebalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BalanceDetails.prototype.hasAvailablebalance = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BalanceAmount floatBalance = 2;
 * @return {?proto.snap.BalanceAmount}
 */
proto.snap.BalanceDetails.prototype.getFloatbalance = function() {
  return /** @type{?proto.snap.BalanceAmount} */ (
    jspb.Message.getWrapperField(this, proto.snap.BalanceAmount, 2));
};


/**
 * @param {?proto.snap.BalanceAmount|undefined} value
 * @return {!proto.snap.BalanceDetails} returns this
*/
proto.snap.BalanceDetails.prototype.setFloatbalance = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BalanceDetails} returns this
 */
proto.snap.BalanceDetails.prototype.clearFloatbalance = function() {
  return this.setFloatbalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BalanceDetails.prototype.hasFloatbalance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BalanceAmount holdBalance = 3;
 * @return {?proto.snap.BalanceAmount}
 */
proto.snap.BalanceDetails.prototype.getHoldbalance = function() {
  return /** @type{?proto.snap.BalanceAmount} */ (
    jspb.Message.getWrapperField(this, proto.snap.BalanceAmount, 3));
};


/**
 * @param {?proto.snap.BalanceAmount|undefined} value
 * @return {!proto.snap.BalanceDetails} returns this
*/
proto.snap.BalanceDetails.prototype.setHoldbalance = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BalanceDetails} returns this
 */
proto.snap.BalanceDetails.prototype.clearHoldbalance = function() {
  return this.setHoldbalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BalanceDetails.prototype.hasHoldbalance = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.BankStatementBalanceDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.BankStatementBalanceDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.BankStatementBalanceDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankStatementBalanceDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    balancedetails: (f = msg.getBalancedetails()) && proto.snap.BalanceAmount.toObject(includeInstance, f),
    datetime: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.BankStatementBalanceDetail}
 */
proto.snap.BankStatementBalanceDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.BankStatementBalanceDetail;
  return proto.snap.BankStatementBalanceDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.BankStatementBalanceDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.BankStatementBalanceDetail}
 */
proto.snap.BankStatementBalanceDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snap.BalanceAmount;
      reader.readMessage(value,proto.snap.BalanceAmount.deserializeBinaryFromReader);
      msg.setBalancedetails(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDatetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.BankStatementBalanceDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.BankStatementBalanceDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.BankStatementBalanceDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankStatementBalanceDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalancedetails();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snap.BalanceAmount.serializeBinaryToWriter
    );
  }
  f = message.getDatetime();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional BalanceAmount balanceDetails = 1;
 * @return {?proto.snap.BalanceAmount}
 */
proto.snap.BankStatementBalanceDetail.prototype.getBalancedetails = function() {
  return /** @type{?proto.snap.BalanceAmount} */ (
    jspb.Message.getWrapperField(this, proto.snap.BalanceAmount, 1));
};


/**
 * @param {?proto.snap.BalanceAmount|undefined} value
 * @return {!proto.snap.BankStatementBalanceDetail} returns this
*/
proto.snap.BankStatementBalanceDetail.prototype.setBalancedetails = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BankStatementBalanceDetail} returns this
 */
proto.snap.BankStatementBalanceDetail.prototype.clearBalancedetails = function() {
  return this.setBalancedetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BankStatementBalanceDetail.prototype.hasBalancedetails = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string dateTime = 2;
 * @return {string}
 */
proto.snap.BankStatementBalanceDetail.prototype.getDatetime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankStatementBalanceDetail} returns this
 */
proto.snap.BankStatementBalanceDetail.prototype.setDatetime = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.BankStatementBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.BankStatementBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.BankStatementBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankStatementBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && proto.snap.BankStatementBalanceDetail.toObject(includeInstance, f),
    startingbalance: (f = msg.getStartingbalance()) && proto.snap.BankStatementBalanceDetail.toObject(includeInstance, f),
    endingbalance: (f = msg.getEndingbalance()) && proto.snap.BankStatementBalanceDetail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.BankStatementBalance}
 */
proto.snap.BankStatementBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.BankStatementBalance;
  return proto.snap.BankStatementBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.BankStatementBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.BankStatementBalance}
 */
proto.snap.BankStatementBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snap.BankStatementBalanceDetail;
      reader.readMessage(value,proto.snap.BankStatementBalanceDetail.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = new proto.snap.BankStatementBalanceDetail;
      reader.readMessage(value,proto.snap.BankStatementBalanceDetail.deserializeBinaryFromReader);
      msg.setStartingbalance(value);
      break;
    case 3:
      var value = new proto.snap.BankStatementBalanceDetail;
      reader.readMessage(value,proto.snap.BankStatementBalanceDetail.deserializeBinaryFromReader);
      msg.setEndingbalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.BankStatementBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.BankStatementBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.BankStatementBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankStatementBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snap.BankStatementBalanceDetail.serializeBinaryToWriter
    );
  }
  f = message.getStartingbalance();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.snap.BankStatementBalanceDetail.serializeBinaryToWriter
    );
  }
  f = message.getEndingbalance();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.snap.BankStatementBalanceDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional BankStatementBalanceDetail amount = 1;
 * @return {?proto.snap.BankStatementBalanceDetail}
 */
proto.snap.BankStatementBalance.prototype.getAmount = function() {
  return /** @type{?proto.snap.BankStatementBalanceDetail} */ (
    jspb.Message.getWrapperField(this, proto.snap.BankStatementBalanceDetail, 1));
};


/**
 * @param {?proto.snap.BankStatementBalanceDetail|undefined} value
 * @return {!proto.snap.BankStatementBalance} returns this
*/
proto.snap.BankStatementBalance.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BankStatementBalance} returns this
 */
proto.snap.BankStatementBalance.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BankStatementBalance.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BankStatementBalanceDetail startingBalance = 2;
 * @return {?proto.snap.BankStatementBalanceDetail}
 */
proto.snap.BankStatementBalance.prototype.getStartingbalance = function() {
  return /** @type{?proto.snap.BankStatementBalanceDetail} */ (
    jspb.Message.getWrapperField(this, proto.snap.BankStatementBalanceDetail, 2));
};


/**
 * @param {?proto.snap.BankStatementBalanceDetail|undefined} value
 * @return {!proto.snap.BankStatementBalance} returns this
*/
proto.snap.BankStatementBalance.prototype.setStartingbalance = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BankStatementBalance} returns this
 */
proto.snap.BankStatementBalance.prototype.clearStartingbalance = function() {
  return this.setStartingbalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BankStatementBalance.prototype.hasStartingbalance = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BankStatementBalanceDetail endingBalance = 3;
 * @return {?proto.snap.BankStatementBalanceDetail}
 */
proto.snap.BankStatementBalance.prototype.getEndingbalance = function() {
  return /** @type{?proto.snap.BankStatementBalanceDetail} */ (
    jspb.Message.getWrapperField(this, proto.snap.BankStatementBalanceDetail, 3));
};


/**
 * @param {?proto.snap.BankStatementBalanceDetail|undefined} value
 * @return {!proto.snap.BankStatementBalance} returns this
*/
proto.snap.BankStatementBalance.prototype.setEndingbalance = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BankStatementBalance} returns this
 */
proto.snap.BankStatementBalance.prototype.clearEndingbalance = function() {
  return this.setEndingbalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BankStatementBalance.prototype.hasEndingbalance = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.BankTransactionEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.BankTransactionEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.BankTransactionEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankTransactionEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    numofentries: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: (f = msg.getAmount()) && proto.snap.BalanceAmount.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.BankTransactionEntry}
 */
proto.snap.BankTransactionEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.BankTransactionEntry;
  return proto.snap.BankTransactionEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.BankTransactionEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.BankTransactionEntry}
 */
proto.snap.BankTransactionEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumofentries(value);
      break;
    case 2:
      var value = new proto.snap.BalanceAmount;
      reader.readMessage(value,proto.snap.BalanceAmount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.BankTransactionEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.BankTransactionEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.BankTransactionEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankTransactionEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumofentries();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.snap.BalanceAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional string numOfEntries = 1;
 * @return {string}
 */
proto.snap.BankTransactionEntry.prototype.getNumofentries = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankTransactionEntry} returns this
 */
proto.snap.BankTransactionEntry.prototype.setNumofentries = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional BalanceAmount amount = 2;
 * @return {?proto.snap.BalanceAmount}
 */
proto.snap.BankTransactionEntry.prototype.getAmount = function() {
  return /** @type{?proto.snap.BalanceAmount} */ (
    jspb.Message.getWrapperField(this, proto.snap.BalanceAmount, 2));
};


/**
 * @param {?proto.snap.BalanceAmount|undefined} value
 * @return {!proto.snap.BankTransactionEntry} returns this
*/
proto.snap.BankTransactionEntry.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BankTransactionEntry} returns this
 */
proto.snap.BankTransactionEntry.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BankTransactionEntry.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.snap.BankStatementDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.snap.BankStatementDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.snap.BankStatementDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankStatementDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = msg.getAmount()) && proto.snap.BalanceAmount.toObject(includeInstance, f),
    transactiontype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    transactionremark: jspb.Message.getFieldWithDefault(msg, 3, ""),
    transactiondate: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.snap.BankStatementDetail}
 */
proto.snap.BankStatementDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.snap.BankStatementDetail;
  return proto.snap.BankStatementDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.snap.BankStatementDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.snap.BankStatementDetail}
 */
proto.snap.BankStatementDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.snap.BalanceAmount;
      reader.readMessage(value,proto.snap.BalanceAmount.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactiontype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionremark(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactiondate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.snap.BankStatementDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.snap.BankStatementDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.snap.BankStatementDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.snap.BankStatementDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.snap.BalanceAmount.serializeBinaryToWriter
    );
  }
  f = message.getTransactiontype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTransactionremark();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTransactiondate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional BalanceAmount amount = 1;
 * @return {?proto.snap.BalanceAmount}
 */
proto.snap.BankStatementDetail.prototype.getAmount = function() {
  return /** @type{?proto.snap.BalanceAmount} */ (
    jspb.Message.getWrapperField(this, proto.snap.BalanceAmount, 1));
};


/**
 * @param {?proto.snap.BalanceAmount|undefined} value
 * @return {!proto.snap.BankStatementDetail} returns this
*/
proto.snap.BankStatementDetail.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.snap.BankStatementDetail} returns this
 */
proto.snap.BankStatementDetail.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.snap.BankStatementDetail.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string transactionType = 2;
 * @return {string}
 */
proto.snap.BankStatementDetail.prototype.getTransactiontype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankStatementDetail} returns this
 */
proto.snap.BankStatementDetail.prototype.setTransactiontype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string transactionRemark = 3;
 * @return {string}
 */
proto.snap.BankStatementDetail.prototype.getTransactionremark = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankStatementDetail} returns this
 */
proto.snap.BankStatementDetail.prototype.setTransactionremark = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string transactionDate = 4;
 * @return {string}
 */
proto.snap.BankStatementDetail.prototype.getTransactiondate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.snap.BankStatementDetail} returns this
 */
proto.snap.BankStatementDetail.prototype.setTransactiondate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.snap);
