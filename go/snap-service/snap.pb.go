// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: snap.proto

package snap_service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RPCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response int32  `protobuf:"varint,1,opt,name=response,proto3" json:"response,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RPCResponse) Reset() {
	*x = RPCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCResponse) ProtoMessage() {}

func (x *RPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCResponse.ProtoReflect.Descriptor instead.
func (*RPCResponse) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{0}
}

func (x *RPCResponse) GetResponse() int32 {
	if x != nil {
		return x.Response
	}
	return 0
}

func (x *RPCResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{1}
}

type AddVirtualAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdTransaction         int64  `protobuf:"varint,1,opt,name=idTransaction,proto3" json:"idTransaction,omitempty"`
	TransactionIdentifier string `protobuf:"bytes,2,opt,name=transactionIdentifier,proto3" json:"transactionIdentifier,omitempty"`
	IdBank                int64  `protobuf:"varint,3,opt,name=idBank,proto3" json:"idBank,omitempty"`
	CustomerNo            string `protobuf:"bytes,4,opt,name=customerNo,proto3" json:"customerNo,omitempty"`
	AccountName           string `protobuf:"bytes,5,opt,name=accountName,proto3" json:"accountName,omitempty"`
	TotalAmount           string `protobuf:"bytes,6,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
	FeeAmount             string `protobuf:"bytes,7,opt,name=feeAmount,proto3" json:"feeAmount,omitempty"`
	ExpireDate            string `protobuf:"bytes,8,opt,name=expireDate,proto3" json:"expireDate,omitempty"`
}

func (x *AddVirtualAccountRequest) Reset() {
	*x = AddVirtualAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVirtualAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVirtualAccountRequest) ProtoMessage() {}

func (x *AddVirtualAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVirtualAccountRequest.ProtoReflect.Descriptor instead.
func (*AddVirtualAccountRequest) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{2}
}

func (x *AddVirtualAccountRequest) GetIdTransaction() int64 {
	if x != nil {
		return x.IdTransaction
	}
	return 0
}

func (x *AddVirtualAccountRequest) GetTransactionIdentifier() string {
	if x != nil {
		return x.TransactionIdentifier
	}
	return ""
}

func (x *AddVirtualAccountRequest) GetIdBank() int64 {
	if x != nil {
		return x.IdBank
	}
	return 0
}

func (x *AddVirtualAccountRequest) GetCustomerNo() string {
	if x != nil {
		return x.CustomerNo
	}
	return ""
}

func (x *AddVirtualAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *AddVirtualAccountRequest) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *AddVirtualAccountRequest) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

func (x *AddVirtualAccountRequest) GetExpireDate() string {
	if x != nil {
		return x.ExpireDate
	}
	return ""
}

type AddVirtualAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response              *RPCResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	VaNum                 string       `protobuf:"bytes,2,opt,name=vaNum,proto3" json:"vaNum,omitempty"`
	ExpireDate            string       `protobuf:"bytes,3,opt,name=expireDate,proto3" json:"expireDate,omitempty"`
	TransactionIdentifier string       `protobuf:"bytes,4,opt,name=transactionIdentifier,proto3" json:"transactionIdentifier,omitempty"`
	BankInfo              *Bank        `protobuf:"bytes,5,opt,name=bankInfo,proto3" json:"bankInfo,omitempty"`
	VaAccountName         string       `protobuf:"bytes,6,opt,name=vaAccountName,proto3" json:"vaAccountName,omitempty"`
	TotalAmount           string       `protobuf:"bytes,7,opt,name=totalAmount,proto3" json:"totalAmount,omitempty"`
}

func (x *AddVirtualAccountResponse) Reset() {
	*x = AddVirtualAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVirtualAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVirtualAccountResponse) ProtoMessage() {}

func (x *AddVirtualAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVirtualAccountResponse.ProtoReflect.Descriptor instead.
func (*AddVirtualAccountResponse) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{3}
}

func (x *AddVirtualAccountResponse) GetResponse() *RPCResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *AddVirtualAccountResponse) GetVaNum() string {
	if x != nil {
		return x.VaNum
	}
	return ""
}

func (x *AddVirtualAccountResponse) GetExpireDate() string {
	if x != nil {
		return x.ExpireDate
	}
	return ""
}

func (x *AddVirtualAccountResponse) GetTransactionIdentifier() string {
	if x != nil {
		return x.TransactionIdentifier
	}
	return ""
}

func (x *AddVirtualAccountResponse) GetBankInfo() *Bank {
	if x != nil {
		return x.BankInfo
	}
	return nil
}

func (x *AddVirtualAccountResponse) GetVaAccountName() string {
	if x != nil {
		return x.VaAccountName
	}
	return ""
}

func (x *AddVirtualAccountResponse) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

type BalanceInquiryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response       *RPCResponse    `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	AccountNumber  string          `protobuf:"bytes,2,opt,name=accountNumber,proto3" json:"accountNumber,omitempty"`
	AccountName    string          `protobuf:"bytes,3,opt,name=accountName,proto3" json:"accountName,omitempty"`
	Balance        *BalanceAmount  `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance,omitempty"`
	BalanceDetails *BalanceDetails `protobuf:"bytes,5,opt,name=balanceDetails,proto3" json:"balanceDetails,omitempty"`
	JsonStr        string          `protobuf:"bytes,6,opt,name=jsonStr,proto3" json:"jsonStr,omitempty"` // JSON representation of the response
}

func (x *BalanceInquiryResponse) Reset() {
	*x = BalanceInquiryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceInquiryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceInquiryResponse) ProtoMessage() {}

func (x *BalanceInquiryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceInquiryResponse.ProtoReflect.Descriptor instead.
func (*BalanceInquiryResponse) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{4}
}

func (x *BalanceInquiryResponse) GetResponse() *RPCResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *BalanceInquiryResponse) GetAccountNumber() string {
	if x != nil {
		return x.AccountNumber
	}
	return ""
}

func (x *BalanceInquiryResponse) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *BalanceInquiryResponse) GetBalance() *BalanceAmount {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *BalanceInquiryResponse) GetBalanceDetails() *BalanceDetails {
	if x != nil {
		return x.BalanceDetails
	}
	return nil
}

func (x *BalanceInquiryResponse) GetJsonStr() string {
	if x != nil {
		return x.JsonStr
	}
	return ""
}

type BankStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromDateTime string `protobuf:"bytes,1,opt,name=fromDateTime,proto3" json:"fromDateTime,omitempty"`
	ToDateTime   string `protobuf:"bytes,2,opt,name=toDateTime,proto3" json:"toDateTime,omitempty"`
}

func (x *BankStatementRequest) Reset() {
	*x = BankStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankStatementRequest) ProtoMessage() {}

func (x *BankStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankStatementRequest.ProtoReflect.Descriptor instead.
func (*BankStatementRequest) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{5}
}

func (x *BankStatementRequest) GetFromDateTime() string {
	if x != nil {
		return x.FromDateTime
	}
	return ""
}

func (x *BankStatementRequest) GetToDateTime() string {
	if x != nil {
		return x.ToDateTime
	}
	return ""
}

type BankStatementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response      *RPCResponse           `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Balance       *BankStatementBalance  `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
	CreditEntries *BankTransactionEntry  `protobuf:"bytes,3,opt,name=creditEntries,proto3" json:"creditEntries,omitempty"`
	DebitEntries  *BankTransactionEntry  `protobuf:"bytes,4,opt,name=debitEntries,proto3" json:"debitEntries,omitempty"`
	Statements    []*BankStatementDetail `protobuf:"bytes,5,rep,name=statements,proto3" json:"statements,omitempty"`
	JsonStr       string                 `protobuf:"bytes,6,opt,name=jsonStr,proto3" json:"jsonStr,omitempty"` // JSON representation of the response
}

func (x *BankStatementResponse) Reset() {
	*x = BankStatementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankStatementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankStatementResponse) ProtoMessage() {}

func (x *BankStatementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankStatementResponse.ProtoReflect.Descriptor instead.
func (*BankStatementResponse) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{6}
}

func (x *BankStatementResponse) GetResponse() *RPCResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *BankStatementResponse) GetBalance() *BankStatementBalance {
	if x != nil {
		return x.Balance
	}
	return nil
}

func (x *BankStatementResponse) GetCreditEntries() *BankTransactionEntry {
	if x != nil {
		return x.CreditEntries
	}
	return nil
}

func (x *BankStatementResponse) GetDebitEntries() *BankTransactionEntry {
	if x != nil {
		return x.DebitEntries
	}
	return nil
}

func (x *BankStatementResponse) GetStatements() []*BankStatementDetail {
	if x != nil {
		return x.Statements
	}
	return nil
}

func (x *BankStatementResponse) GetJsonStr() string {
	if x != nil {
		return x.JsonStr
	}
	return ""
}

type BankTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount                 *BalanceAmount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	BeneficiaryAccountNo   string         `protobuf:"bytes,2,opt,name=beneficiaryAccountNo,proto3" json:"beneficiaryAccountNo,omitempty"`
	BeneficiaryAccountName string         `protobuf:"bytes,3,opt,name=beneficiaryAccountName,proto3" json:"beneficiaryAccountName,omitempty"`
	BeneficiaryBankCode    string         `protobuf:"bytes,4,opt,name=beneficiaryBankCode,proto3" json:"beneficiaryBankCode,omitempty"`
	BeneficiaryEmail       string         `protobuf:"bytes,5,opt,name=beneficiaryEmail,proto3" json:"beneficiaryEmail,omitempty"`
	TransactionDate        string         `protobuf:"bytes,6,opt,name=transactionDate,proto3" json:"transactionDate,omitempty"`
	TransactionRemark      string         `protobuf:"bytes,7,opt,name=transactionRemark,proto3" json:"transactionRemark,omitempty"`
}

func (x *BankTransferRequest) Reset() {
	*x = BankTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankTransferRequest) ProtoMessage() {}

func (x *BankTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankTransferRequest.ProtoReflect.Descriptor instead.
func (*BankTransferRequest) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{7}
}

func (x *BankTransferRequest) GetAmount() *BalanceAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *BankTransferRequest) GetBeneficiaryAccountNo() string {
	if x != nil {
		return x.BeneficiaryAccountNo
	}
	return ""
}

func (x *BankTransferRequest) GetBeneficiaryAccountName() string {
	if x != nil {
		return x.BeneficiaryAccountName
	}
	return ""
}

func (x *BankTransferRequest) GetBeneficiaryBankCode() string {
	if x != nil {
		return x.BeneficiaryBankCode
	}
	return ""
}

func (x *BankTransferRequest) GetBeneficiaryEmail() string {
	if x != nil {
		return x.BeneficiaryEmail
	}
	return ""
}

func (x *BankTransferRequest) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *BankTransferRequest) GetTransactionRemark() string {
	if x != nil {
		return x.TransactionRemark
	}
	return ""
}

type TransferIntraBankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount                 *BalanceAmount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	BeneficiaryAccountNo   string         `protobuf:"bytes,2,opt,name=beneficiaryAccountNo,proto3" json:"beneficiaryAccountNo,omitempty"`
	BeneficiaryEmail       string         `protobuf:"bytes,3,opt,name=beneficiaryEmail,proto3" json:"beneficiaryEmail,omitempty"`
	TransactionDate        string         `protobuf:"bytes,4,opt,name=transactionDate,proto3" json:"transactionDate,omitempty"`
	BeneficiaryAccountName string         `protobuf:"bytes,5,opt,name=beneficiaryAccountName,proto3" json:"beneficiaryAccountName,omitempty"`
	TransactionRemark      string         `protobuf:"bytes,6,opt,name=transactionRemark,proto3" json:"transactionRemark,omitempty"`
}

func (x *TransferIntraBankRequest) Reset() {
	*x = TransferIntraBankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferIntraBankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferIntraBankRequest) ProtoMessage() {}

func (x *TransferIntraBankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferIntraBankRequest.ProtoReflect.Descriptor instead.
func (*TransferIntraBankRequest) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{8}
}

func (x *TransferIntraBankRequest) GetAmount() *BalanceAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TransferIntraBankRequest) GetBeneficiaryAccountNo() string {
	if x != nil {
		return x.BeneficiaryAccountNo
	}
	return ""
}

func (x *TransferIntraBankRequest) GetBeneficiaryEmail() string {
	if x != nil {
		return x.BeneficiaryEmail
	}
	return ""
}

func (x *TransferIntraBankRequest) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *TransferIntraBankRequest) GetBeneficiaryAccountName() string {
	if x != nil {
		return x.BeneficiaryAccountName
	}
	return ""
}

func (x *TransferIntraBankRequest) GetTransactionRemark() string {
	if x != nil {
		return x.TransactionRemark
	}
	return ""
}

type TransferInterBankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount                 *BalanceAmount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	BeneficiaryAccountNo   string         `protobuf:"bytes,2,opt,name=beneficiaryAccountNo,proto3" json:"beneficiaryAccountNo,omitempty"`
	BeneficiaryAccountName string         `protobuf:"bytes,3,opt,name=beneficiaryAccountName,proto3" json:"beneficiaryAccountName,omitempty"`
	BeneficiaryBankCode    string         `protobuf:"bytes,4,opt,name=beneficiaryBankCode,proto3" json:"beneficiaryBankCode,omitempty"`
	BeneficiaryEmail       string         `protobuf:"bytes,5,opt,name=beneficiaryEmail,proto3" json:"beneficiaryEmail,omitempty"`
	TransactionDate        string         `protobuf:"bytes,6,opt,name=transactionDate,proto3" json:"transactionDate,omitempty"`
	TransactionRemark      string         `protobuf:"bytes,7,opt,name=transactionRemark,proto3" json:"transactionRemark,omitempty"`
}

func (x *TransferInterBankRequest) Reset() {
	*x = TransferInterBankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferInterBankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferInterBankRequest) ProtoMessage() {}

func (x *TransferInterBankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferInterBankRequest.ProtoReflect.Descriptor instead.
func (*TransferInterBankRequest) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{9}
}

func (x *TransferInterBankRequest) GetAmount() *BalanceAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TransferInterBankRequest) GetBeneficiaryAccountNo() string {
	if x != nil {
		return x.BeneficiaryAccountNo
	}
	return ""
}

func (x *TransferInterBankRequest) GetBeneficiaryAccountName() string {
	if x != nil {
		return x.BeneficiaryAccountName
	}
	return ""
}

func (x *TransferInterBankRequest) GetBeneficiaryBankCode() string {
	if x != nil {
		return x.BeneficiaryBankCode
	}
	return ""
}

func (x *TransferInterBankRequest) GetBeneficiaryEmail() string {
	if x != nil {
		return x.BeneficiaryEmail
	}
	return ""
}

func (x *TransferInterBankRequest) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *TransferInterBankRequest) GetTransactionRemark() string {
	if x != nil {
		return x.TransactionRemark
	}
	return ""
}

type BankTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response                *RPCResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	TransactionReferenceStr string       `protobuf:"bytes,2,opt,name=transactionReferenceStr,proto3" json:"transactionReferenceStr,omitempty"`
	ExternalId              string       `protobuf:"bytes,3,opt,name=externalId,proto3" json:"externalId,omitempty"`
	ServiceCode             string       `protobuf:"bytes,4,opt,name=serviceCode,proto3" json:"serviceCode,omitempty"`
	TransactionDate         string       `protobuf:"bytes,5,opt,name=transactionDate,proto3" json:"transactionDate,omitempty"`
	JsonStr                 string       `protobuf:"bytes,6,opt,name=jsonStr,proto3" json:"jsonStr,omitempty"` // JSON representation of the response
	TransactionStatusCode   string       `protobuf:"bytes,7,opt,name=transactionStatusCode,proto3" json:"transactionStatusCode,omitempty"`
	TransactionStatusDesc   string       `protobuf:"bytes,8,opt,name=transactionStatusDesc,proto3" json:"transactionStatusDesc,omitempty"`
}

func (x *BankTransferResponse) Reset() {
	*x = BankTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankTransferResponse) ProtoMessage() {}

func (x *BankTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankTransferResponse.ProtoReflect.Descriptor instead.
func (*BankTransferResponse) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{10}
}

func (x *BankTransferResponse) GetResponse() *RPCResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *BankTransferResponse) GetTransactionReferenceStr() string {
	if x != nil {
		return x.TransactionReferenceStr
	}
	return ""
}

func (x *BankTransferResponse) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *BankTransferResponse) GetServiceCode() string {
	if x != nil {
		return x.ServiceCode
	}
	return ""
}

func (x *BankTransferResponse) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *BankTransferResponse) GetJsonStr() string {
	if x != nil {
		return x.JsonStr
	}
	return ""
}

func (x *BankTransferResponse) GetTransactionStatusCode() string {
	if x != nil {
		return x.TransactionStatusCode
	}
	return ""
}

func (x *BankTransferResponse) GetTransactionStatusDesc() string {
	if x != nil {
		return x.TransactionStatusDesc
	}
	return ""
}

type ExternalAccountInquiryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeneficiaryBankCode  string         `protobuf:"bytes,1,opt,name=beneficiaryBankCode,proto3" json:"beneficiaryBankCode,omitempty"`
	BeneficiaryAccountNo string         `protobuf:"bytes,2,opt,name=beneficiaryAccountNo,proto3" json:"beneficiaryAccountNo,omitempty"`
	InquiryService       string         `protobuf:"bytes,3,opt,name=inquiryService,proto3" json:"inquiryService,omitempty"`
	PurposeCode          string         `protobuf:"bytes,4,opt,name=purposeCode,proto3" json:"purposeCode,omitempty"`
	Amount               *BalanceAmount `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ExternalAccountInquiryRequest) Reset() {
	*x = ExternalAccountInquiryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAccountInquiryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAccountInquiryRequest) ProtoMessage() {}

func (x *ExternalAccountInquiryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAccountInquiryRequest.ProtoReflect.Descriptor instead.
func (*ExternalAccountInquiryRequest) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{11}
}

func (x *ExternalAccountInquiryRequest) GetBeneficiaryBankCode() string {
	if x != nil {
		return x.BeneficiaryBankCode
	}
	return ""
}

func (x *ExternalAccountInquiryRequest) GetBeneficiaryAccountNo() string {
	if x != nil {
		return x.BeneficiaryAccountNo
	}
	return ""
}

func (x *ExternalAccountInquiryRequest) GetInquiryService() string {
	if x != nil {
		return x.InquiryService
	}
	return ""
}

func (x *ExternalAccountInquiryRequest) GetPurposeCode() string {
	if x != nil {
		return x.PurposeCode
	}
	return ""
}

func (x *ExternalAccountInquiryRequest) GetAmount() *BalanceAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

type ExternalAccountInquiryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response               *RPCResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	BeneficiaryAccountName string       `protobuf:"bytes,2,opt,name=beneficiaryAccountName,proto3" json:"beneficiaryAccountName,omitempty"`
	BeneficiaryAccountNo   string       `protobuf:"bytes,3,opt,name=beneficiaryAccountNo,proto3" json:"beneficiaryAccountNo,omitempty"`
	BeneficiaryBankCode    string       `protobuf:"bytes,4,opt,name=beneficiaryBankCode,proto3" json:"beneficiaryBankCode,omitempty"`
	JsonStr                string       `protobuf:"bytes,5,opt,name=jsonStr,proto3" json:"jsonStr,omitempty"`
}

func (x *ExternalAccountInquiryResponse) Reset() {
	*x = ExternalAccountInquiryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalAccountInquiryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalAccountInquiryResponse) ProtoMessage() {}

func (x *ExternalAccountInquiryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalAccountInquiryResponse.ProtoReflect.Descriptor instead.
func (*ExternalAccountInquiryResponse) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{12}
}

func (x *ExternalAccountInquiryResponse) GetResponse() *RPCResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *ExternalAccountInquiryResponse) GetBeneficiaryAccountName() string {
	if x != nil {
		return x.BeneficiaryAccountName
	}
	return ""
}

func (x *ExternalAccountInquiryResponse) GetBeneficiaryAccountNo() string {
	if x != nil {
		return x.BeneficiaryAccountNo
	}
	return ""
}

func (x *ExternalAccountInquiryResponse) GetBeneficiaryBankCode() string {
	if x != nil {
		return x.BeneficiaryBankCode
	}
	return ""
}

func (x *ExternalAccountInquiryResponse) GetJsonStr() string {
	if x != nil {
		return x.JsonStr
	}
	return ""
}

type InternalAccountInquiryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeneficiaryAccountNo string `protobuf:"bytes,1,opt,name=beneficiaryAccountNo,proto3" json:"beneficiaryAccountNo,omitempty"`
}

func (x *InternalAccountInquiryRequest) Reset() {
	*x = InternalAccountInquiryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalAccountInquiryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalAccountInquiryRequest) ProtoMessage() {}

func (x *InternalAccountInquiryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalAccountInquiryRequest.ProtoReflect.Descriptor instead.
func (*InternalAccountInquiryRequest) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{13}
}

func (x *InternalAccountInquiryRequest) GetBeneficiaryAccountNo() string {
	if x != nil {
		return x.BeneficiaryAccountNo
	}
	return ""
}

type InternalAccountInquiryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response               *RPCResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	BeneficiaryAccountName string       `protobuf:"bytes,2,opt,name=beneficiaryAccountName,proto3" json:"beneficiaryAccountName,omitempty"`
	BeneficiaryAccountNo   string       `protobuf:"bytes,3,opt,name=beneficiaryAccountNo,proto3" json:"beneficiaryAccountNo,omitempty"`
	JsonStr                string       `protobuf:"bytes,4,opt,name=jsonStr,proto3" json:"jsonStr,omitempty"` // JSON representation of the response
}

func (x *InternalAccountInquiryResponse) Reset() {
	*x = InternalAccountInquiryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternalAccountInquiryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalAccountInquiryResponse) ProtoMessage() {}

func (x *InternalAccountInquiryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalAccountInquiryResponse.ProtoReflect.Descriptor instead.
func (*InternalAccountInquiryResponse) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{14}
}

func (x *InternalAccountInquiryResponse) GetResponse() *RPCResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *InternalAccountInquiryResponse) GetBeneficiaryAccountName() string {
	if x != nil {
		return x.BeneficiaryAccountName
	}
	return ""
}

func (x *InternalAccountInquiryResponse) GetBeneficiaryAccountNo() string {
	if x != nil {
		return x.BeneficiaryAccountNo
	}
	return ""
}

func (x *InternalAccountInquiryResponse) GetJsonStr() string {
	if x != nil {
		return x.JsonStr
	}
	return ""
}

type VirtualAccountStatusInquiryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VaNum string `protobuf:"bytes,1,opt,name=vaNum,proto3" json:"vaNum,omitempty"`
}

func (x *VirtualAccountStatusInquiryRequest) Reset() {
	*x = VirtualAccountStatusInquiryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualAccountStatusInquiryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualAccountStatusInquiryRequest) ProtoMessage() {}

func (x *VirtualAccountStatusInquiryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualAccountStatusInquiryRequest.ProtoReflect.Descriptor instead.
func (*VirtualAccountStatusInquiryRequest) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{15}
}

func (x *VirtualAccountStatusInquiryRequest) GetVaNum() string {
	if x != nil {
		return x.VaNum
	}
	return ""
}

type VirtualAccountStatusInquiryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response   *RPCResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	VaNum      string       `protobuf:"bytes,2,opt,name=vaNum,proto3" json:"vaNum,omitempty"`
	VaStatus   string       `protobuf:"bytes,3,opt,name=vaStatus,proto3" json:"vaStatus,omitempty"`
	ExpireDate string       `protobuf:"bytes,4,opt,name=expireDate,proto3" json:"expireDate,omitempty"`
	PaidDate   string       `protobuf:"bytes,5,opt,name=paidDate,proto3" json:"paidDate,omitempty"`
	JsonStr    string       `protobuf:"bytes,6,opt,name=jsonStr,proto3" json:"jsonStr,omitempty"` // JSON representation of the response
}

func (x *VirtualAccountStatusInquiryResponse) Reset() {
	*x = VirtualAccountStatusInquiryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualAccountStatusInquiryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualAccountStatusInquiryResponse) ProtoMessage() {}

func (x *VirtualAccountStatusInquiryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualAccountStatusInquiryResponse.ProtoReflect.Descriptor instead.
func (*VirtualAccountStatusInquiryResponse) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{16}
}

func (x *VirtualAccountStatusInquiryResponse) GetResponse() *RPCResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *VirtualAccountStatusInquiryResponse) GetVaNum() string {
	if x != nil {
		return x.VaNum
	}
	return ""
}

func (x *VirtualAccountStatusInquiryResponse) GetVaStatus() string {
	if x != nil {
		return x.VaStatus
	}
	return ""
}

func (x *VirtualAccountStatusInquiryResponse) GetExpireDate() string {
	if x != nil {
		return x.ExpireDate
	}
	return ""
}

func (x *VirtualAccountStatusInquiryResponse) GetPaidDate() string {
	if x != nil {
		return x.PaidDate
	}
	return ""
}

func (x *VirtualAccountStatusInquiryResponse) GetJsonStr() string {
	if x != nil {
		return x.JsonStr
	}
	return ""
}

type TransferStatusInquiryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionReferenceNo string `protobuf:"bytes,1,opt,name=transactionReferenceNo,proto3" json:"transactionReferenceNo,omitempty"`
}

func (x *TransferStatusInquiryRequest) Reset() {
	*x = TransferStatusInquiryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferStatusInquiryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferStatusInquiryRequest) ProtoMessage() {}

func (x *TransferStatusInquiryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferStatusInquiryRequest.ProtoReflect.Descriptor instead.
func (*TransferStatusInquiryRequest) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{17}
}

func (x *TransferStatusInquiryRequest) GetTransactionReferenceNo() string {
	if x != nil {
		return x.TransactionReferenceNo
	}
	return ""
}

type TransferStatusInquiryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response                     *RPCResponse   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	ServiceTransactionReference  string         `protobuf:"bytes,2,opt,name=serviceTransactionReference,proto3" json:"serviceTransactionReference,omitempty"`
	InternalTransactionReference string         `protobuf:"bytes,3,opt,name=internalTransactionReference,proto3" json:"internalTransactionReference,omitempty"`
	ExternalId                   string         `protobuf:"bytes,4,opt,name=externalId,proto3" json:"externalId,omitempty"`
	ServiceCode                  string         `protobuf:"bytes,5,opt,name=serviceCode,proto3" json:"serviceCode,omitempty"`
	TransactionDate              string         `protobuf:"bytes,6,opt,name=transactionDate,proto3" json:"transactionDate,omitempty"`
	Amount                       *BalanceAmount `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
	BeneficiaryAccountNo         string         `protobuf:"bytes,8,opt,name=beneficiaryAccountNo,proto3" json:"beneficiaryAccountNo,omitempty"`
	BeneficiaryBankCode          string         `protobuf:"bytes,9,opt,name=beneficiaryBankCode,proto3" json:"beneficiaryBankCode,omitempty"`
	TransactionStatusCode        string         `protobuf:"bytes,10,opt,name=transactionStatusCode,proto3" json:"transactionStatusCode,omitempty"`
	TranscationStatusDesc        string         `protobuf:"bytes,11,opt,name=transcationStatusDesc,proto3" json:"transcationStatusDesc,omitempty"`
	JsonStr                      string         `protobuf:"bytes,12,opt,name=jsonStr,proto3" json:"jsonStr,omitempty"` // JSON representation of the response
}

func (x *TransferStatusInquiryResponse) Reset() {
	*x = TransferStatusInquiryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferStatusInquiryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferStatusInquiryResponse) ProtoMessage() {}

func (x *TransferStatusInquiryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferStatusInquiryResponse.ProtoReflect.Descriptor instead.
func (*TransferStatusInquiryResponse) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{18}
}

func (x *TransferStatusInquiryResponse) GetResponse() *RPCResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *TransferStatusInquiryResponse) GetServiceTransactionReference() string {
	if x != nil {
		return x.ServiceTransactionReference
	}
	return ""
}

func (x *TransferStatusInquiryResponse) GetInternalTransactionReference() string {
	if x != nil {
		return x.InternalTransactionReference
	}
	return ""
}

func (x *TransferStatusInquiryResponse) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *TransferStatusInquiryResponse) GetServiceCode() string {
	if x != nil {
		return x.ServiceCode
	}
	return ""
}

func (x *TransferStatusInquiryResponse) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *TransferStatusInquiryResponse) GetAmount() *BalanceAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *TransferStatusInquiryResponse) GetBeneficiaryAccountNo() string {
	if x != nil {
		return x.BeneficiaryAccountNo
	}
	return ""
}

func (x *TransferStatusInquiryResponse) GetBeneficiaryBankCode() string {
	if x != nil {
		return x.BeneficiaryBankCode
	}
	return ""
}

func (x *TransferStatusInquiryResponse) GetTransactionStatusCode() string {
	if x != nil {
		return x.TransactionStatusCode
	}
	return ""
}

func (x *TransferStatusInquiryResponse) GetTranscationStatusDesc() string {
	if x != nil {
		return x.TranscationStatusDesc
	}
	return ""
}

func (x *TransferStatusInquiryResponse) GetJsonStr() string {
	if x != nil {
		return x.JsonStr
	}
	return ""
}

type BalanceAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    string    `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Currency string    `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	HintText *HintText `protobuf:"bytes,3,opt,name=hintText,proto3" json:"hintText,omitempty"`
}

func (x *BalanceAmount) Reset() {
	*x = BalanceAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceAmount) ProtoMessage() {}

func (x *BalanceAmount) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceAmount.ProtoReflect.Descriptor instead.
func (*BalanceAmount) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{19}
}

func (x *BalanceAmount) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *BalanceAmount) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BalanceAmount) GetHintText() *HintText {
	if x != nil {
		return x.HintText
	}
	return nil
}

type HintText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	En string `protobuf:"bytes,1,opt,name=en,proto3" json:"en,omitempty"`
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HintText) Reset() {
	*x = HintText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HintText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HintText) ProtoMessage() {}

func (x *HintText) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HintText.ProtoReflect.Descriptor instead.
func (*HintText) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{20}
}

func (x *HintText) GetEn() string {
	if x != nil {
		return x.En
	}
	return ""
}

func (x *HintText) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type BalanceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableBalance *BalanceAmount `protobuf:"bytes,1,opt,name=availableBalance,proto3" json:"availableBalance,omitempty"`
	FloatBalance     *BalanceAmount `protobuf:"bytes,2,opt,name=floatBalance,proto3" json:"floatBalance,omitempty"`
	HoldBalance      *BalanceAmount `protobuf:"bytes,3,opt,name=holdBalance,proto3" json:"holdBalance,omitempty"`
}

func (x *BalanceDetails) Reset() {
	*x = BalanceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceDetails) ProtoMessage() {}

func (x *BalanceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceDetails.ProtoReflect.Descriptor instead.
func (*BalanceDetails) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{21}
}

func (x *BalanceDetails) GetAvailableBalance() *BalanceAmount {
	if x != nil {
		return x.AvailableBalance
	}
	return nil
}

func (x *BalanceDetails) GetFloatBalance() *BalanceAmount {
	if x != nil {
		return x.FloatBalance
	}
	return nil
}

func (x *BalanceDetails) GetHoldBalance() *BalanceAmount {
	if x != nil {
		return x.HoldBalance
	}
	return nil
}

type BankStatementBalanceDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BalanceDetails *BalanceAmount `protobuf:"bytes,1,opt,name=balanceDetails,proto3" json:"balanceDetails,omitempty"`
	DateTime       string         `protobuf:"bytes,2,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
}

func (x *BankStatementBalanceDetail) Reset() {
	*x = BankStatementBalanceDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankStatementBalanceDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankStatementBalanceDetail) ProtoMessage() {}

func (x *BankStatementBalanceDetail) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankStatementBalanceDetail.ProtoReflect.Descriptor instead.
func (*BankStatementBalanceDetail) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{22}
}

func (x *BankStatementBalanceDetail) GetBalanceDetails() *BalanceAmount {
	if x != nil {
		return x.BalanceDetails
	}
	return nil
}

func (x *BankStatementBalanceDetail) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

type BankStatementBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount          *BankStatementBalanceDetail `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	StartingBalance *BankStatementBalanceDetail `protobuf:"bytes,2,opt,name=startingBalance,proto3" json:"startingBalance,omitempty"`
	EndingBalance   *BankStatementBalanceDetail `protobuf:"bytes,3,opt,name=endingBalance,proto3" json:"endingBalance,omitempty"`
}

func (x *BankStatementBalance) Reset() {
	*x = BankStatementBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankStatementBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankStatementBalance) ProtoMessage() {}

func (x *BankStatementBalance) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankStatementBalance.ProtoReflect.Descriptor instead.
func (*BankStatementBalance) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{23}
}

func (x *BankStatementBalance) GetAmount() *BankStatementBalanceDetail {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *BankStatementBalance) GetStartingBalance() *BankStatementBalanceDetail {
	if x != nil {
		return x.StartingBalance
	}
	return nil
}

func (x *BankStatementBalance) GetEndingBalance() *BankStatementBalanceDetail {
	if x != nil {
		return x.EndingBalance
	}
	return nil
}

type BankTransactionEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumOfEntries string         `protobuf:"bytes,1,opt,name=numOfEntries,proto3" json:"numOfEntries,omitempty"`
	Amount       *BalanceAmount `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *BankTransactionEntry) Reset() {
	*x = BankTransactionEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankTransactionEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankTransactionEntry) ProtoMessage() {}

func (x *BankTransactionEntry) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankTransactionEntry.ProtoReflect.Descriptor instead.
func (*BankTransactionEntry) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{24}
}

func (x *BankTransactionEntry) GetNumOfEntries() string {
	if x != nil {
		return x.NumOfEntries
	}
	return ""
}

func (x *BankTransactionEntry) GetAmount() *BalanceAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

type BankStatementDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount            *BalanceAmount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	TransactionType   string         `protobuf:"bytes,2,opt,name=transactionType,proto3" json:"transactionType,omitempty"`
	TransactionRemark string         `protobuf:"bytes,3,opt,name=transactionRemark,proto3" json:"transactionRemark,omitempty"`
	TransactionDate   string         `protobuf:"bytes,4,opt,name=transactionDate,proto3" json:"transactionDate,omitempty"`
}

func (x *BankStatementDetail) Reset() {
	*x = BankStatementDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BankStatementDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BankStatementDetail) ProtoMessage() {}

func (x *BankStatementDetail) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BankStatementDetail.ProtoReflect.Descriptor instead.
func (*BankStatementDetail) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{25}
}

func (x *BankStatementDetail) GetAmount() *BalanceAmount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *BankStatementDetail) GetTransactionType() string {
	if x != nil {
		return x.TransactionType
	}
	return ""
}

func (x *BankStatementDetail) GetTransactionRemark() string {
	if x != nil {
		return x.TransactionRemark
	}
	return ""
}

func (x *BankStatementDetail) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

type SnapHelper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SnapHelper) Reset() {
	*x = SnapHelper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapHelper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapHelper) ProtoMessage() {}

func (x *SnapHelper) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapHelper.ProtoReflect.Descriptor instead.
func (*SnapHelper) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{26}
}

func (x *SnapHelper) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SnapHelper) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Bank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Helper      *SnapHelper `protobuf:"bytes,1,opt,name=helper,proto3" json:"helper,omitempty"`
	PicturePath string      `protobuf:"bytes,2,opt,name=picturePath,proto3" json:"picturePath,omitempty"`
	SwiftCode   string      `protobuf:"bytes,3,opt,name=swiftCode,proto3" json:"swiftCode,omitempty"`
}

func (x *Bank) Reset() {
	*x = Bank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snap_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bank) ProtoMessage() {}

func (x *Bank) ProtoReflect() protoreflect.Message {
	mi := &file_snap_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bank.ProtoReflect.Descriptor instead.
func (*Bank) Descriptor() ([]byte, []int) {
	return file_snap_proto_rawDescGZIP(), []int{27}
}

func (x *Bank) GetHelper() *SnapHelper {
	if x != nil {
		return x.Helper
	}
	return nil
}

func (x *Bank) GetPicturePath() string {
	if x != nil {
		return x.PicturePath
	}
	return ""
}

func (x *Bank) GetSwiftCode() string {
	if x != nil {
		return x.SwiftCode
	}
	return ""
}

var File_snap_proto protoreflect.FileDescriptor

var file_snap_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x73, 0x6e,
	0x61, 0x70, 0x22, 0x43, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0xb0, 0x02, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x69, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x42,
	0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x64, 0x42, 0x61, 0x6e,
	0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e,
	0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x22, 0xa6, 0x02, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x52, 0x50, 0x43, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x08,
	0x62, 0x61, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x96, 0x02, 0x0a,
	0x16, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x2e, 0x52, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a,
	0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6a,
	0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x73,
	0x6f, 0x6e, 0x53, 0x74, 0x72, 0x22, 0x5a, 0x0a, 0x14, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xd3, 0x02, 0x0a, 0x15, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x2e, 0x52, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x40, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42,
	0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e,
	0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x22, 0xe4, 0x02, 0x0a, 0x13, 0x42, 0x61, 0x6e, 0x6b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f,
	0x12, 0x36, 0x0a, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61,
	0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xb7,
	0x02, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x72, 0x61,
	0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x2a, 0x0a, 0x10,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xe9, 0x02, 0x0a, 0x18, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69,
	0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0xf1, 0x02, 0x0a, 0x14, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x52, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x17,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x12, 0x34, 0x0a, 0x15,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x22, 0xfc, 0x01, 0x0a, 0x1d, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x1e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x2e, 0x52, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42,
	0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x22, 0x53, 0x0a, 0x1d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x1e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x2e, 0x52, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x22, 0x3a,
	0x0a, 0x22, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x4e, 0x75, 0x6d, 0x22, 0xdc, 0x01, 0x0a, 0x23, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x52, 0x50, 0x43, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x22, 0x56, 0x0a, 0x1c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x6f, 0x22, 0xd9, 0x04, 0x0a, 0x1d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x52, 0x50, 0x43,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63,
	0x69, 0x61, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x42,
	0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a,
	0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x22, 0x6d, 0x0a,
	0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x2a, 0x0a, 0x08, 0x68, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x48, 0x69, 0x6e, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x08, 0x68, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x2a, 0x0a, 0x08,
	0x48, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x10, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0c,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x75, 0x0a, 0x1a,
	0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x0e, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x14, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x6e, 0x61, 0x70,
	0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0d, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x67, 0x0a, 0x14, 0x42, 0x61,
	0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x30, 0x0a, 0x0a, 0x53, 0x6e,
	0x61, 0x70, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x04,
	0x42, 0x61, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x06, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x53, 0x6e, 0x61, 0x70,
	0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x77, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x77, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x32, 0xf3,
	0x06, 0x0a, 0x0b, 0x53, 0x6e, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x54,
	0x0a, 0x11, 0x41, 0x64, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x12, 0x0b, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x42, 0x61, 0x6e, 0x6b,
	0x12, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x49, 0x6e, 0x74, 0x72, 0x61, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6e,
	0x6b, 0x12, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x0c, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x19, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e,
	0x42, 0x61, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x12, 0x23,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x16, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x71, 0x75,
	0x69, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72,
	0x0a, 0x1b, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x12, 0x28, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x73, 0x6e,
	0x61, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snap_proto_rawDescOnce sync.Once
	file_snap_proto_rawDescData = file_snap_proto_rawDesc
)

func file_snap_proto_rawDescGZIP() []byte {
	file_snap_proto_rawDescOnce.Do(func() {
		file_snap_proto_rawDescData = protoimpl.X.CompressGZIP(file_snap_proto_rawDescData)
	})
	return file_snap_proto_rawDescData
}

var file_snap_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_snap_proto_goTypes = []interface{}{
	(*RPCResponse)(nil),                         // 0: snap.RPCResponse
	(*Empty)(nil),                               // 1: snap.Empty
	(*AddVirtualAccountRequest)(nil),            // 2: snap.AddVirtualAccountRequest
	(*AddVirtualAccountResponse)(nil),           // 3: snap.AddVirtualAccountResponse
	(*BalanceInquiryResponse)(nil),              // 4: snap.BalanceInquiryResponse
	(*BankStatementRequest)(nil),                // 5: snap.BankStatementRequest
	(*BankStatementResponse)(nil),               // 6: snap.BankStatementResponse
	(*BankTransferRequest)(nil),                 // 7: snap.BankTransferRequest
	(*TransferIntraBankRequest)(nil),            // 8: snap.TransferIntraBankRequest
	(*TransferInterBankRequest)(nil),            // 9: snap.TransferInterBankRequest
	(*BankTransferResponse)(nil),                // 10: snap.BankTransferResponse
	(*ExternalAccountInquiryRequest)(nil),       // 11: snap.ExternalAccountInquiryRequest
	(*ExternalAccountInquiryResponse)(nil),      // 12: snap.ExternalAccountInquiryResponse
	(*InternalAccountInquiryRequest)(nil),       // 13: snap.InternalAccountInquiryRequest
	(*InternalAccountInquiryResponse)(nil),      // 14: snap.InternalAccountInquiryResponse
	(*VirtualAccountStatusInquiryRequest)(nil),  // 15: snap.VirtualAccountStatusInquiryRequest
	(*VirtualAccountStatusInquiryResponse)(nil), // 16: snap.VirtualAccountStatusInquiryResponse
	(*TransferStatusInquiryRequest)(nil),        // 17: snap.TransferStatusInquiryRequest
	(*TransferStatusInquiryResponse)(nil),       // 18: snap.TransferStatusInquiryResponse
	(*BalanceAmount)(nil),                       // 19: snap.BalanceAmount
	(*HintText)(nil),                            // 20: snap.HintText
	(*BalanceDetails)(nil),                      // 21: snap.BalanceDetails
	(*BankStatementBalanceDetail)(nil),          // 22: snap.BankStatementBalanceDetail
	(*BankStatementBalance)(nil),                // 23: snap.BankStatementBalance
	(*BankTransactionEntry)(nil),                // 24: snap.BankTransactionEntry
	(*BankStatementDetail)(nil),                 // 25: snap.BankStatementDetail
	(*SnapHelper)(nil),                          // 26: snap.SnapHelper
	(*Bank)(nil),                                // 27: snap.Bank
}
var file_snap_proto_depIdxs = []int32{
	0,  // 0: snap.AddVirtualAccountResponse.response:type_name -> snap.RPCResponse
	27, // 1: snap.AddVirtualAccountResponse.bankInfo:type_name -> snap.Bank
	0,  // 2: snap.BalanceInquiryResponse.response:type_name -> snap.RPCResponse
	19, // 3: snap.BalanceInquiryResponse.balance:type_name -> snap.BalanceAmount
	21, // 4: snap.BalanceInquiryResponse.balanceDetails:type_name -> snap.BalanceDetails
	0,  // 5: snap.BankStatementResponse.response:type_name -> snap.RPCResponse
	23, // 6: snap.BankStatementResponse.balance:type_name -> snap.BankStatementBalance
	24, // 7: snap.BankStatementResponse.creditEntries:type_name -> snap.BankTransactionEntry
	24, // 8: snap.BankStatementResponse.debitEntries:type_name -> snap.BankTransactionEntry
	25, // 9: snap.BankStatementResponse.statements:type_name -> snap.BankStatementDetail
	19, // 10: snap.BankTransferRequest.amount:type_name -> snap.BalanceAmount
	19, // 11: snap.TransferIntraBankRequest.amount:type_name -> snap.BalanceAmount
	19, // 12: snap.TransferInterBankRequest.amount:type_name -> snap.BalanceAmount
	0,  // 13: snap.BankTransferResponse.response:type_name -> snap.RPCResponse
	19, // 14: snap.ExternalAccountInquiryRequest.amount:type_name -> snap.BalanceAmount
	0,  // 15: snap.ExternalAccountInquiryResponse.response:type_name -> snap.RPCResponse
	0,  // 16: snap.InternalAccountInquiryResponse.response:type_name -> snap.RPCResponse
	0,  // 17: snap.VirtualAccountStatusInquiryResponse.response:type_name -> snap.RPCResponse
	0,  // 18: snap.TransferStatusInquiryResponse.response:type_name -> snap.RPCResponse
	19, // 19: snap.TransferStatusInquiryResponse.amount:type_name -> snap.BalanceAmount
	20, // 20: snap.BalanceAmount.hintText:type_name -> snap.HintText
	19, // 21: snap.BalanceDetails.availableBalance:type_name -> snap.BalanceAmount
	19, // 22: snap.BalanceDetails.floatBalance:type_name -> snap.BalanceAmount
	19, // 23: snap.BalanceDetails.holdBalance:type_name -> snap.BalanceAmount
	19, // 24: snap.BankStatementBalanceDetail.balanceDetails:type_name -> snap.BalanceAmount
	22, // 25: snap.BankStatementBalance.amount:type_name -> snap.BankStatementBalanceDetail
	22, // 26: snap.BankStatementBalance.startingBalance:type_name -> snap.BankStatementBalanceDetail
	22, // 27: snap.BankStatementBalance.endingBalance:type_name -> snap.BankStatementBalanceDetail
	19, // 28: snap.BankTransactionEntry.amount:type_name -> snap.BalanceAmount
	19, // 29: snap.BankStatementDetail.amount:type_name -> snap.BalanceAmount
	26, // 30: snap.Bank.helper:type_name -> snap.SnapHelper
	2,  // 31: snap.SnapService.AddVirtualAccount:input_type -> snap.AddVirtualAccountRequest
	1,  // 32: snap.SnapService.BalanceInquiry:input_type -> snap.Empty
	5,  // 33: snap.SnapService.BankStatement:input_type -> snap.BankStatementRequest
	8,  // 34: snap.SnapService.TransferIntraBank:input_type -> snap.TransferIntraBankRequest
	9,  // 35: snap.SnapService.TransferInterBank:input_type -> snap.TransferInterBankRequest
	7,  // 36: snap.SnapService.BankTransfer:input_type -> snap.BankTransferRequest
	11, // 37: snap.SnapService.ExternalAccountInquiry:input_type -> snap.ExternalAccountInquiryRequest
	13, // 38: snap.SnapService.InternalAccountInquiry:input_type -> snap.InternalAccountInquiryRequest
	15, // 39: snap.SnapService.VirtualAccountStatusInquiry:input_type -> snap.VirtualAccountStatusInquiryRequest
	17, // 40: snap.SnapService.TransferStatusInquiry:input_type -> snap.TransferStatusInquiryRequest
	3,  // 41: snap.SnapService.AddVirtualAccount:output_type -> snap.AddVirtualAccountResponse
	4,  // 42: snap.SnapService.BalanceInquiry:output_type -> snap.BalanceInquiryResponse
	6,  // 43: snap.SnapService.BankStatement:output_type -> snap.BankStatementResponse
	10, // 44: snap.SnapService.TransferIntraBank:output_type -> snap.BankTransferResponse
	10, // 45: snap.SnapService.TransferInterBank:output_type -> snap.BankTransferResponse
	10, // 46: snap.SnapService.BankTransfer:output_type -> snap.BankTransferResponse
	12, // 47: snap.SnapService.ExternalAccountInquiry:output_type -> snap.ExternalAccountInquiryResponse
	14, // 48: snap.SnapService.InternalAccountInquiry:output_type -> snap.InternalAccountInquiryResponse
	16, // 49: snap.SnapService.VirtualAccountStatusInquiry:output_type -> snap.VirtualAccountStatusInquiryResponse
	18, // 50: snap.SnapService.TransferStatusInquiry:output_type -> snap.TransferStatusInquiryResponse
	41, // [41:51] is the sub-list for method output_type
	31, // [31:41] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_snap_proto_init() }
func file_snap_proto_init() {
	if File_snap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVirtualAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVirtualAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceInquiryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankStatementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferIntraBankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferInterBankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalAccountInquiryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalAccountInquiryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalAccountInquiryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternalAccountInquiryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualAccountStatusInquiryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualAccountStatusInquiryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferStatusInquiryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferStatusInquiryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HintText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankStatementBalanceDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankStatementBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankTransactionEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BankStatementDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapHelper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snap_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snap_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_snap_proto_goTypes,
		DependencyIndexes: file_snap_proto_depIdxs,
		MessageInfos:      file_snap_proto_msgTypes,
	}.Build()
	File_snap_proto = out.File
	file_snap_proto_rawDesc = nil
	file_snap_proto_goTypes = nil
	file_snap_proto_depIdxs = nil
}
