// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: snap.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SnapService_AddVirtualAccount_FullMethodName           = "/payment.SnapService/AddVirtualAccount"
	SnapService_BalanceInquiry_FullMethodName              = "/payment.SnapService/BalanceInquiry"
	SnapService_BankStatement_FullMethodName               = "/payment.SnapService/BankStatement"
	SnapService_TransferIntraBank_FullMethodName           = "/payment.SnapService/TransferIntraBank"
	SnapService_TransferInterBank_FullMethodName           = "/payment.SnapService/TransferInterBank"
	SnapService_BankTransfer_FullMethodName                = "/payment.SnapService/BankTransfer"
	SnapService_ExternalAccountInquiry_FullMethodName      = "/payment.SnapService/ExternalAccountInquiry"
	SnapService_InternalAccountInquiry_FullMethodName      = "/payment.SnapService/InternalAccountInquiry"
	SnapService_VirtualAccountStatusInquiry_FullMethodName = "/payment.SnapService/VirtualAccountStatusInquiry"
	SnapService_TransferStatusInquiry_FullMethodName       = "/payment.SnapService/TransferStatusInquiry"
	SnapService_GenerateQRIS_FullMethodName                = "/payment.SnapService/GenerateQRIS"
)

// SnapServiceClient is the client API for SnapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Not every snap service is implemented in this proto file, some are served via http 1.1 request
type SnapServiceClient interface {
	AddVirtualAccount(ctx context.Context, in *AddVirtualAccountRequest, opts ...grpc.CallOption) (*AddVirtualAccountResponse, error)
	BalanceInquiry(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BalanceInquiryResponse, error)
	BankStatement(ctx context.Context, in *BankStatementRequest, opts ...grpc.CallOption) (*BankStatementResponse, error)
	TransferIntraBank(ctx context.Context, in *TransferIntraBankRequest, opts ...grpc.CallOption) (*BankTransferResponse, error)
	TransferInterBank(ctx context.Context, in *TransferInterBankRequest, opts ...grpc.CallOption) (*BankTransferResponse, error)
	BankTransfer(ctx context.Context, in *BankTransferRequest, opts ...grpc.CallOption) (*BankTransferResponse, error)
	ExternalAccountInquiry(ctx context.Context, in *ExternalAccountInquiryRequest, opts ...grpc.CallOption) (*ExternalAccountInquiryResponse, error)
	InternalAccountInquiry(ctx context.Context, in *InternalAccountInquiryRequest, opts ...grpc.CallOption) (*InternalAccountInquiryResponse, error)
	VirtualAccountStatusInquiry(ctx context.Context, in *VirtualAccountStatusInquiryRequest, opts ...grpc.CallOption) (*VirtualAccountStatusInquiryResponse, error)
	TransferStatusInquiry(ctx context.Context, in *TransferStatusInquiryRequest, opts ...grpc.CallOption) (*TransferStatusInquiryResponse, error)
	GenerateQRIS(ctx context.Context, in *GenerateQRISRequest, opts ...grpc.CallOption) (*GenerateQRISResponse, error)
}

type snapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnapServiceClient(cc grpc.ClientConnInterface) SnapServiceClient {
	return &snapServiceClient{cc}
}

func (c *snapServiceClient) AddVirtualAccount(ctx context.Context, in *AddVirtualAccountRequest, opts ...grpc.CallOption) (*AddVirtualAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddVirtualAccountResponse)
	err := c.cc.Invoke(ctx, SnapService_AddVirtualAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapServiceClient) BalanceInquiry(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BalanceInquiryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceInquiryResponse)
	err := c.cc.Invoke(ctx, SnapService_BalanceInquiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapServiceClient) BankStatement(ctx context.Context, in *BankStatementRequest, opts ...grpc.CallOption) (*BankStatementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankStatementResponse)
	err := c.cc.Invoke(ctx, SnapService_BankStatement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapServiceClient) TransferIntraBank(ctx context.Context, in *TransferIntraBankRequest, opts ...grpc.CallOption) (*BankTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankTransferResponse)
	err := c.cc.Invoke(ctx, SnapService_TransferIntraBank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapServiceClient) TransferInterBank(ctx context.Context, in *TransferInterBankRequest, opts ...grpc.CallOption) (*BankTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankTransferResponse)
	err := c.cc.Invoke(ctx, SnapService_TransferInterBank_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapServiceClient) BankTransfer(ctx context.Context, in *BankTransferRequest, opts ...grpc.CallOption) (*BankTransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankTransferResponse)
	err := c.cc.Invoke(ctx, SnapService_BankTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapServiceClient) ExternalAccountInquiry(ctx context.Context, in *ExternalAccountInquiryRequest, opts ...grpc.CallOption) (*ExternalAccountInquiryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExternalAccountInquiryResponse)
	err := c.cc.Invoke(ctx, SnapService_ExternalAccountInquiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapServiceClient) InternalAccountInquiry(ctx context.Context, in *InternalAccountInquiryRequest, opts ...grpc.CallOption) (*InternalAccountInquiryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InternalAccountInquiryResponse)
	err := c.cc.Invoke(ctx, SnapService_InternalAccountInquiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapServiceClient) VirtualAccountStatusInquiry(ctx context.Context, in *VirtualAccountStatusInquiryRequest, opts ...grpc.CallOption) (*VirtualAccountStatusInquiryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VirtualAccountStatusInquiryResponse)
	err := c.cc.Invoke(ctx, SnapService_VirtualAccountStatusInquiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapServiceClient) TransferStatusInquiry(ctx context.Context, in *TransferStatusInquiryRequest, opts ...grpc.CallOption) (*TransferStatusInquiryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferStatusInquiryResponse)
	err := c.cc.Invoke(ctx, SnapService_TransferStatusInquiry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snapServiceClient) GenerateQRIS(ctx context.Context, in *GenerateQRISRequest, opts ...grpc.CallOption) (*GenerateQRISResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateQRISResponse)
	err := c.cc.Invoke(ctx, SnapService_GenerateQRIS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnapServiceServer is the server API for SnapService service.
// All implementations must embed UnimplementedSnapServiceServer
// for forward compatibility.
//
// Not every snap service is implemented in this proto file, some are served via http 1.1 request
type SnapServiceServer interface {
	AddVirtualAccount(context.Context, *AddVirtualAccountRequest) (*AddVirtualAccountResponse, error)
	BalanceInquiry(context.Context, *Empty) (*BalanceInquiryResponse, error)
	BankStatement(context.Context, *BankStatementRequest) (*BankStatementResponse, error)
	TransferIntraBank(context.Context, *TransferIntraBankRequest) (*BankTransferResponse, error)
	TransferInterBank(context.Context, *TransferInterBankRequest) (*BankTransferResponse, error)
	BankTransfer(context.Context, *BankTransferRequest) (*BankTransferResponse, error)
	ExternalAccountInquiry(context.Context, *ExternalAccountInquiryRequest) (*ExternalAccountInquiryResponse, error)
	InternalAccountInquiry(context.Context, *InternalAccountInquiryRequest) (*InternalAccountInquiryResponse, error)
	VirtualAccountStatusInquiry(context.Context, *VirtualAccountStatusInquiryRequest) (*VirtualAccountStatusInquiryResponse, error)
	TransferStatusInquiry(context.Context, *TransferStatusInquiryRequest) (*TransferStatusInquiryResponse, error)
	GenerateQRIS(context.Context, *GenerateQRISRequest) (*GenerateQRISResponse, error)
	mustEmbedUnimplementedSnapServiceServer()
}

// UnimplementedSnapServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSnapServiceServer struct{}

func (UnimplementedSnapServiceServer) AddVirtualAccount(context.Context, *AddVirtualAccountRequest) (*AddVirtualAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVirtualAccount not implemented")
}
func (UnimplementedSnapServiceServer) BalanceInquiry(context.Context, *Empty) (*BalanceInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceInquiry not implemented")
}
func (UnimplementedSnapServiceServer) BankStatement(context.Context, *BankStatementRequest) (*BankStatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankStatement not implemented")
}
func (UnimplementedSnapServiceServer) TransferIntraBank(context.Context, *TransferIntraBankRequest) (*BankTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferIntraBank not implemented")
}
func (UnimplementedSnapServiceServer) TransferInterBank(context.Context, *TransferInterBankRequest) (*BankTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferInterBank not implemented")
}
func (UnimplementedSnapServiceServer) BankTransfer(context.Context, *BankTransferRequest) (*BankTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BankTransfer not implemented")
}
func (UnimplementedSnapServiceServer) ExternalAccountInquiry(context.Context, *ExternalAccountInquiryRequest) (*ExternalAccountInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExternalAccountInquiry not implemented")
}
func (UnimplementedSnapServiceServer) InternalAccountInquiry(context.Context, *InternalAccountInquiryRequest) (*InternalAccountInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalAccountInquiry not implemented")
}
func (UnimplementedSnapServiceServer) VirtualAccountStatusInquiry(context.Context, *VirtualAccountStatusInquiryRequest) (*VirtualAccountStatusInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualAccountStatusInquiry not implemented")
}
func (UnimplementedSnapServiceServer) TransferStatusInquiry(context.Context, *TransferStatusInquiryRequest) (*TransferStatusInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferStatusInquiry not implemented")
}
func (UnimplementedSnapServiceServer) GenerateQRIS(context.Context, *GenerateQRISRequest) (*GenerateQRISResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateQRIS not implemented")
}
func (UnimplementedSnapServiceServer) mustEmbedUnimplementedSnapServiceServer() {}
func (UnimplementedSnapServiceServer) testEmbeddedByValue()                     {}

// UnsafeSnapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnapServiceServer will
// result in compilation errors.
type UnsafeSnapServiceServer interface {
	mustEmbedUnimplementedSnapServiceServer()
}

func RegisterSnapServiceServer(s grpc.ServiceRegistrar, srv SnapServiceServer) {
	// If the following call pancis, it indicates UnimplementedSnapServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SnapService_ServiceDesc, srv)
}

func _SnapService_AddVirtualAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVirtualAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapServiceServer).AddVirtualAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapService_AddVirtualAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapServiceServer).AddVirtualAccount(ctx, req.(*AddVirtualAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapService_BalanceInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapServiceServer).BalanceInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapService_BalanceInquiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapServiceServer).BalanceInquiry(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapService_BankStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapServiceServer).BankStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapService_BankStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapServiceServer).BankStatement(ctx, req.(*BankStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapService_TransferIntraBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferIntraBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapServiceServer).TransferIntraBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapService_TransferIntraBank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapServiceServer).TransferIntraBank(ctx, req.(*TransferIntraBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapService_TransferInterBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferInterBankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapServiceServer).TransferInterBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapService_TransferInterBank_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapServiceServer).TransferInterBank(ctx, req.(*TransferInterBankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapService_BankTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapServiceServer).BankTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapService_BankTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapServiceServer).BankTransfer(ctx, req.(*BankTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapService_ExternalAccountInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalAccountInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapServiceServer).ExternalAccountInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapService_ExternalAccountInquiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapServiceServer).ExternalAccountInquiry(ctx, req.(*ExternalAccountInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapService_InternalAccountInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InternalAccountInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapServiceServer).InternalAccountInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapService_InternalAccountInquiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapServiceServer).InternalAccountInquiry(ctx, req.(*InternalAccountInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapService_VirtualAccountStatusInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualAccountStatusInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapServiceServer).VirtualAccountStatusInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapService_VirtualAccountStatusInquiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapServiceServer).VirtualAccountStatusInquiry(ctx, req.(*VirtualAccountStatusInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapService_TransferStatusInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferStatusInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapServiceServer).TransferStatusInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapService_TransferStatusInquiry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapServiceServer).TransferStatusInquiry(ctx, req.(*TransferStatusInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnapService_GenerateQRIS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateQRISRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnapServiceServer).GenerateQRIS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SnapService_GenerateQRIS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnapServiceServer).GenerateQRIS(ctx, req.(*GenerateQRISRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SnapService_ServiceDesc is the grpc.ServiceDesc for SnapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.SnapService",
	HandlerType: (*SnapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVirtualAccount",
			Handler:    _SnapService_AddVirtualAccount_Handler,
		},
		{
			MethodName: "BalanceInquiry",
			Handler:    _SnapService_BalanceInquiry_Handler,
		},
		{
			MethodName: "BankStatement",
			Handler:    _SnapService_BankStatement_Handler,
		},
		{
			MethodName: "TransferIntraBank",
			Handler:    _SnapService_TransferIntraBank_Handler,
		},
		{
			MethodName: "TransferInterBank",
			Handler:    _SnapService_TransferInterBank_Handler,
		},
		{
			MethodName: "BankTransfer",
			Handler:    _SnapService_BankTransfer_Handler,
		},
		{
			MethodName: "ExternalAccountInquiry",
			Handler:    _SnapService_ExternalAccountInquiry_Handler,
		},
		{
			MethodName: "InternalAccountInquiry",
			Handler:    _SnapService_InternalAccountInquiry_Handler,
		},
		{
			MethodName: "VirtualAccountStatusInquiry",
			Handler:    _SnapService_VirtualAccountStatusInquiry_Handler,
		},
		{
			MethodName: "TransferStatusInquiry",
			Handler:    _SnapService_TransferStatusInquiry_Handler,
		},
		{
			MethodName: "GenerateQRIS",
			Handler:    _SnapService_GenerateQRIS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snap.proto",
}
